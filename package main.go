package main

import (
	"log"
	"os"
	_ "strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"github.com/joho/godotenv"
)

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
var (
	bot       *tgbotapi.BotAPIk
	userState = make(map[int64]string)
)

// –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
type button struct {
	name string
	data string
}

// /–ú–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
func profile() tgbotapi.InlineKeyboardMarkup {
	states := []button{
		{name: "—Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", data: "create"},
		{name: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", data: "check"},
	}
	var buttons [][]tgbotapi.InlineKeyboardButton
	for _, st := range states {
		row := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(st.name, st.data),
		)
		buttons = append(buttons, row)
	}
	return tgbotapi.NewInlineKeyboardMarkup(buttons...)
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–ø—Ä–∏–º–µ—Ä)
func startMenu() tgbotapi.InlineKeyboardMarkup {
	states := []button{
		{name: "–ü–æ–¥—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π", data: "calorie"},
		{name: "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", data: "traine"},
		{name: "–ü—Ä–æ—Ñ–∏–ª—å", data: "profile"},
	}

	var buttons [][]tgbotapi.InlineKeyboardButton
	for _, st := range states {
		row := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(st.name, st.data),
		)
		buttons = append(buttons, row)
	}
	return tgbotapi.NewInlineKeyboardMarkup(buttons...)
}

// –ú–µ–Ω—é ¬´–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞¬ª
func traineMenu() tgbotapi.InlineKeyboardMarkup {
	states := []button{
		{name: "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: –ª—ë–≥–∫–∏–π —É—Ä–æ–≤–µ–Ω—å", data: "Light"},
		{name: "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å", data: "Midle"},
		{name: "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: —Å–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", data: "Hard"},
		{name: "–ù–∞–∑–∞–¥", data: "back"},
	}

	var buttons [][]tgbotapi.InlineKeyboardButton
	for _, st := range states {
		row := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(st.name, st.data),
		)
		buttons = append(buttons, row)
	}
	return tgbotapi.NewInlineKeyboardMarkup(buttons...)
}

func enlightenment() tgbotapi.InlineKeyboardMarkup {
	states := []button{
		{name: "–ü—Ä–æ–∫–∞—á–∫–∞ –±–∏—Ü–µ–ø—Å–∞", data: "Bicepslight"},
		{name: "–ü—Ä–æ–∫–∞—á–∫–∞ –ø–µ—Ä–µ–¥–Ω–∏–π —á–∞—Å—Ç–∏ —Ä—É–∫—É", data: "handle up"},
		{name: "–ü—Ä–æ–∫–∞—á–∫–∞ —Å—Ä–µ–¥–Ω–∏–π —á–∞—Å—Ç–∏ —Ä—É–∫–∏", data: "handle midle"},
		{name: "–ü—Ä–æ–∫–∞—á–∫–∞ –ó–∞–¥–Ω–∏–π —á–∞—Å—Ç–∏ —Ä—É–∫–∏", data: "handle behind"},
		{name: "–ü—Ä–æ–∫–∞—á–∫–∞ –¢—Ä–∏—Ü–∏–ø—Å–∞", data: "updgrade triceps"},
		{name: "–ü—Ä–æ–∫–∞—á–∫–∞ –±–∏—Ü–µ–ø—Å–∞", data: "Bicepslight"},
		{name: "–Ω–∞–∑–∞–¥", data: "back_to_levels"},
	}
	var buttons [][]tgbotapi.InlineKeyboardButton
	for _, st := range states {
		row := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(st.name, st.data),
		)
		buttons = append(buttons, row)
	}
	return tgbotapi.NewInlineKeyboardMarkup(buttons...)

}

func enlightenmentmidle() tgbotapi.InlineKeyboardMarkup {
	states := []button{
		{name: "–ü—Ä–æ–∫–∞—á–∫–∞ –±–∏—Ü–µ–ø—Å–∞", data: "BicepslightM"},
		{name: "–ü—Ä–æ–∫–∞—á–∫–∞ –ø–µ—Ä–µ–¥–Ω–∏–π —á–∞—Å—Ç–∏ —Ä—É–∫—É", data: "handle upM"},
		{name: "–ü—Ä–æ–∫–∞—á–∫–∞ —Å—Ä–µ–¥–Ω–∏–π —á–∞—Å—Ç–∏ —Ä—É–∫–∏", data: "handle midleM"},
		{name: "–ü—Ä–æ–∫–∞—á–∫–∞ –ó–∞–¥–Ω–∏–π —á–∞—Å—Ç–∏ —Ä—É–∫–∏", data: "handle behindM"},
		{name: "–ü—Ä–æ–∫–∞—á–∫–∞ –¢—Ä–∏—Ü–∏–ø—Å–∞", data: "updgrade tricepsM"},
		{name: "–ü—Ä–æ–∫–∞—á–∫–∞ –±–∏—Ü–µ–ø—Å–∞", data: "BicepslightM"},
		{name: "–Ω–∞–∑–∞–¥", data: "back_to_levels"},
	}
	var buttons [][]tgbotapi.InlineKeyboardButton
	for _, st := range states {
		row := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(st.name, st.data),
		)
		buttons = append(buttons, row)
	}
	return tgbotapi.NewInlineKeyboardMarkup(buttons...)

}
func enlightenmentHard() tgbotapi.InlineKeyboardMarkup {
	states := []button{
		{name: "–ü—Ä–æ–∫–∞—á–∫–∞ –±–∏—Ü–µ–ø—Å–∞", data: "BicepsHard"},
		{name: "–ü—Ä–æ–∫–∞—á–∫–∞ –ø–µ—Ä–µ–¥–Ω–∏–π —á–∞—Å—Ç–∏ —Ä—É–∫—É", data: "handle uphard"},
		{name: "–ü—Ä–æ–∫–∞—á–∫–∞ —Å—Ä–µ–¥–Ω–∏–π —á–∞—Å—Ç–∏ —Ä—É–∫–∏", data: "handle midlehard"},
		{name: "–ü—Ä–æ–∫–∞—á–∫–∞ –ó–∞–¥–Ω–∏–π —á–∞—Å—Ç–∏ —Ä—É–∫–∏", data: "handle behindhard"},
		{name: "–ü—Ä–æ–∫–∞—á–∫–∞ –¢—Ä–∏—Ü–∏–ø—Å–∞", data: "updgrade tricepshard"},
		{name: "–ü—Ä–æ–∫–∞—á–∫–∞ –±–∏—Ü–µ–ø—Å–∞", data: "Bicepslighthard"},
		{name: "–Ω–∞–∑–∞–¥", data: "back_to_levels"},
	}
	var buttons [][]tgbotapi.InlineKeyboardButton
	for _, st := range states {
		row := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(st.name, st.data),
		)
		buttons = append(buttons, row)
	}
	return tgbotapi.NewInlineKeyboardMarkup(buttons...)

}

// –ü—Ä–∏–º–µ—Ä –º–µ–Ω—é "help"

func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env (–∏–ª–∏ –æ—Ç–∫—É–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ)
	err := godotenv.Load(".env")
	if err != nil {
		log.Println(".env not loaded (it's okay if you have token in another place)")
	}

	botToken := os.Getenv("TG_BOT_API")
	bot, err = tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Fatalf("Failed to initialize Telegram bot API: %v", err)
	}

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates, err := bot.GetUpdatesChan(u)
	if err != nil {
		log.Fatalf("Failed to get updates channel: %v", err)
	}

	// –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏
	for update := range updates {
		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫–∏ –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
		if update.CallbackQuery != nil {
			callbacks(update)
			callbackcslight(update)
			callbackcsMidlet(update)
			continue
		}

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
		if update.Message != nil {
			if update.Message.IsCommand() {
				commands(update)
			} else {

			}
		}
	}
}

func callbackcsMidlet(update tgbotapi.Update) {
	data := update.CallbackQuery.Data
	chatID := update.CallbackQuery.Message.Chat.ID
	messageID := update.CallbackQuery.Message.MessageID

	switch data {

	case "back3":
		del := tgbotapi.NewDeleteMessage(chatID, messageID)
		if _, err := bot.Send(del); err != nil {
			log.Printf("Error deleting message: %v", err)
		}
		msg := tgbotapi.NewMessage(chatID, "–≤—ã–±–æ—Ä–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ")
		msg.ReplyMarkup = traineMenu()
		sendMessage(msg)

	case "handle upM":
		del := tgbotapi.NewDeleteMessage(chatID, messageID)
		if _, err := bot.Send(del); err != nil {
			log.Printf("Error deleting message: %v", err)
		}

		//file := tgbotapi.NewDocumentUpload(chatID, tgbotapi.FilePath("C:\\Users\\USER\\Desktop\\Traine\\Midlehandleup.txt"))

	}

}

func callbackcslight(update tgbotapi.Update) {
	data := update.CallbackQuery.Data
	chatID := update.CallbackQuery.Message.Chat.ID
	messageID := update.CallbackQuery.Message.MessageID

	switch data {
	case "back2":
		del := tgbotapi.NewDeleteMessage(chatID, messageID)
		if _, err := bot.Send(del); err != nil {
			log.Printf("Error deleting message: %v", err)
		}

		msg := tgbotapi.NewMessage(chatID, "–≤—ã–±–æ—Ä–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ")
		msg.ReplyMarkup = traineMenu()
		sendMessage(msg)

	}

}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤
func callbacks(update tgbotapi.Update) {
	data := update.CallbackQuery.Data
	chatID := update.CallbackQuery.Message.Chat.ID
	messageID := update.CallbackQuery.Message.MessageID

	switch data {

	case "traine":
		// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		del := tgbotapi.NewDeleteMessage(chatID, messageID)
		if _, err := bot.Send(del); err != nil {
			log.Printf("Error deleting message: %v", err)
		}

		// –í—ã–≤–æ–¥–∏–º –º–µ–Ω—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
		msg := tgbotapi.NewMessage(chatID, "–≠—Ç–æ —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ —É—Ä–æ–≤–Ω—è–º:")
		msg.ReplyMarkup = traineMenu()
		sendMessage(msg)

	case "back":
		// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–µ–Ω—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫)
		del := tgbotapi.NewDeleteMessage(chatID, messageID)
		if _, err := bot.Send(del); err != nil {
			log.Printf("Error deleting message: %v", err)
		}

		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
		msg := tgbotapi.NewMessage(chatID, "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é:")
		msg.ReplyMarkup = startMenu()
		sendMessage(msg)

	case "Light":
		del := tgbotapi.NewDeleteMessage(chatID, messageID)
		if _, err := bot.Send(del); err != nil {
			log.Printf("Error deleting message: %v", err)
		}
		msg := tgbotapi.NewMessage(chatID, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª—ë–≥–∫–∏–π —É—Ä–æ–≤–µ–Ω—å")
		msg.ReplyMarkup = enlightenment()
		sendMessage(msg)

	case "Midle":
		del := tgbotapi.NewDeleteMessage(chatID, messageID)
		if _, err := bot.Send(del); err != nil {
			log.Printf("Error deleting message: %v", err)
		}

		msg := tgbotapi.NewMessage(chatID, "–≤—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å")
		msg.ReplyMarkup = enlightenmentmidle()
		sendMessage(msg)
		// –õ–æ–≥–∏–∫–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
	case "Hard":
		// –õ–æ–≥–∏–∫–∞ —Å–ª–æ–∂–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
		sendText(chatID, "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å")
	}
}

func commands(update tgbotapi.Update) {
	chatID := update.Message.Chat.ID

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "start"
	switch update.Message.Command() {
	case "start":
		// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		welcomeText := `–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫-–±–æ—Ç. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:
- üì∏ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏.
- üèãÔ∏è‚Äç‚ôÇÔ∏è –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.
- üßë‚Äçüíª –ü—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤—Ä—É—á–Ω—É—é. –ù–∞–ø—Ä–∏–º–µ—Ä:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/train - –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
/profile - –ü—Ä–æ—Ñ–∏–ª—å`

		// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		msg := tgbotapi.NewMessage(chatID, welcomeText)
		if _, err := bot.Send(msg); err != nil {
			log.Printf("Failed to send welcome message: %v", err)
			return
		}

		// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
		keyboard := tgbotapi.NewReplyKeyboard(
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton("üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É"),
				tgbotapi.NewKeyboardButton("üèãÔ∏è‚Äç‚ôÇÔ∏è –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"),
			),
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton("üßë‚Äçüíª –ü—Ä–æ—Ñ–∏–ª—å"),
			),
		)
		keyboard.ResizeKeyboard = true // –ü–æ–¥–≥–æ–Ω–∫–∞ –∫–Ω–æ–ø–æ–∫

		// –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
		menuMsg := tgbotapi.NewMessage(chatID, welcomeText)
		menuMsg.ReplyMarkup = keyboard
		if _, err := bot.Send(menuMsg); err != nil {
			log.Printf("Failed to send menu: %v", err)
		}

	case "train":
		msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:")
		msg.ReplyMarkup = traineMenu()
		if _, err := bot.Send(msg); err != nil {
			log.Printf("Error sending message: %v", err)
		}

	case "profile":
		msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è:")
		msg.ReplyMarkup = profile()
		sendMessage(msg)

	default:
		sendText(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: "+update.Message.Command())
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback
func handleCallback(update tgbotapi.Update) {
	if update.CallbackQuery == nil {
		return
	}

	chatID := update.CallbackQuery.Message.Chat.ID
	data := update.CallbackQuery.Data

	switch data {
	case "Light":
		msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –ª—ë–≥–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è:")
		msg.ReplyMarkup = enlightenment()
		if _, err := bot.Send(msg); err != nil {
			log.Printf("Error sending Light menu: %v", err)
		}

	case "Midle":
		msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è:")
		msg.ReplyMarkup = enlightenmentMidle()
		if _, err := bot.Send(msg); err != nil {
			log.Printf("Error sending Midle menu: %v", err)
		}

	case "Hard":
		msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è —Å–ª–æ–∂–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è:")
		msg.ReplyMarkup = enlightenmentHard()
		if _, err := bot.Send(msg); err != nil {
			log.Printf("Failed to send Hard menu: %v", err)
		}

	default:
		sendText(chatID, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –≤—ã–±–æ—Ä.")
	}

	// –û—Ç–≤–µ—Ç –Ω–∞ CallbackQuery
	bot.AnswerCallbackQuery(tgbotapi.NewCallback(update.CallbackQuery.ID, ""))
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
func sendText(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	if _, err := bot.Send(msg); err != nil {
		log.Printf("Failed to send message: %v", err)
	}
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
func sendMessage(msg tgbotapi.Chattable) {
	if _, err := bot.Send(msg); err != nil {
		log.Printf("Failed to send message: %v", err)
	}
}

// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –ë–î)
