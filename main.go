package main

import (
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"github.com/joho/godotenv"
)


const (
	profileStepHeight = 1
	profileStepWeight = 2
	profileStepAge    = 3
	profileStepGender = 4
	profileStepDone   = 5
)

const (
	diaryStepAdd = 201
)

var userStep = make(map[int64]int)

type user_profile struct {
	Height int
	Weight int
	Age    int
	Gender string
}

var userProfiles = make(map[int64]*user_profile)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è ¬´–∫–Ω–æ–ø–æ–∫¬ª
type button struct {
	name string
	data string
}

var bot *tgbotapi.BotAPI


func calculateCalories(gender string, weight float64, height float64, age int) float64 {
	if gender == "–º—É–∂—Å–∫–æ–π" {
		return 88.36 + (13.4 * weight) + (4.8 * height) - (5.7 * float64(age))
	}
	return 447.6 + (9.2 * weight) + (3.1 * height) - (4.3 * float64(age))
}


type DiaryEntry struct {
	Date time.Time // –ö–æ–≥–¥–∞ –±—ã–ª–∞ —Å–¥–µ–ª–∞–Ω–∞ –∑–∞–ø–∏—Å—å
	Text string    // –¢–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏
}

var userDiary = make(map[int64][]DiaryEntry)

func diaryMenu() tgbotapi.InlineKeyboardMarkup {
	states := []button{
		{name: "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", data: "diary_add"},
		{name: "–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏", data: "diary_show"},
		{name: "–ù–∞–∑–∞–¥", data: "back"},
	}
	var rows [][]tgbotapi.InlineKeyboardButton
	for _, st := range states {
		btn := tgbotapi.NewInlineKeyboardButtonData(st.name, st.data)
		row := tgbotapi.NewInlineKeyboardRow(btn)
		rows = append(rows, row)
	}
	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env (–∏–ª–∏ –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä—É—á–Ω—É—é)
	err := godotenv.Load(".env")
	if err != nil {
		log.Println(".env not loaded (–µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –ø—Ä–æ–ø–∏—Å–∞–Ω –≤—Ä—É—á–Ω—É—é, —Ç–æ –≤—Å—ë –æ–∫)")
	}

	botToken := os.Getenv("TG_BOT_API")
	if botToken == "" {
		log.Fatal("–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ TG_BOT_API –≤ .env")
	}

	bot, err = tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Bot API: %v", err)
	}

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates, err := bot.GetUpdatesChan(u)
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: %v", err)
	}

	log.Println("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

	// –¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π/–∫–æ–ª–±—ç–∫–æ–≤
	for update := range updates {
		if update.CallbackQuery != nil {
			handleCallback(update)
		} else if update.Message != nil {
			if update.Message.IsCommand() {
				handleCommands(update)
			} else {
				handleMessage(update)
			}
		}
	}
}


func startMenu() tgbotapi.InlineKeyboardMarkup {
	states := []button{
		{name: "–ü–æ–¥—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π", data: "calorie"},
		{name: "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", data: "traine"},
		{name: "–ü—Ä–æ—Ñ–∏–ª—å", data: "profile"},
		{name: "–î–Ω–µ–≤–Ω–∏–∫", data: "dnevnik"},
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	for _, st := range states {
		row := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(st.name, st.data),
		)
		rows = append(rows, row)
	}
	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

// –ú–µ–Ω—é ¬´–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞¬ª
func traineMenu() tgbotapi.InlineKeyboardMarkup {
	states := []button{
		{name: "üü¢–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: –ª—ë–≥–∫–∏–π —É—Ä–æ–≤–µ–Ω—åüü¢", data: "Light"},
		{name: "üü°–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—åüü°", data: "Midle"},
		{name: "üî¥–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: —Å–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—åüî¥", data: "Hard"},
		{name: "–ù–∞–∑–∞–¥", data: "back"},
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	for _, st := range states {
		row := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(st.name, st.data),
		)
		rows = append(rows, row)
	}
	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

func enlightenment() tgbotapi.InlineKeyboardMarkup {
	states := []button{
		{name: "–°–ø–∏–Ω–∞ (–ª—ë–≥.)", data: "backLight"},
		{name: "–†—É–∫–∏ (–ª—ë–≥.)", data: "handleLight"},
		{name: "–ù–æ–≥–∏ (–ª—ë–≥.)", data: "kneesLight"},
		{name: "–¢—Ä–∏—Ü–µ–ø—Å (–ª—ë–≥.)", data: "tricepsLight"},
		{name: "–ë–∏—Ü–µ–ø—Å (–ª—ë–≥.)", data: "bicepsLight"},
		{name: "–ù–∞–∑–∞–¥", data: "lightBack"},
	}
	var rows [][]tgbotapi.InlineKeyboardButton
	for _, st := range states {
		row := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(st.name, st.data),
		)
		rows = append(rows, row)
	}
	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

func enlightenmentMidle() tgbotapi.InlineKeyboardMarkup {
	states := []button{
		{name: "–°–ø–∏–Ω–∞ (—Å—Ä.)", data: "backMidle"},
		{name: "–†—É–∫–∏ (—Å—Ä.)", data: "handleMidle"},
		{name: "–ù–æ–≥–∏ (—Å—Ä.)", data: "kneesMidle"},
		{name: "–¢—Ä–∏—Ü–µ–ø—Å (—Å—Ä.)", data: "tricepsMidle"},
		{name: "–ë–∏—Ü–µ–ø—Å (—Å—Ä.)", data: "bicepsMidle"},
		{name: "–ù–∞–∑–∞–¥", data: "midleBack"},
	}
	var rows [][]tgbotapi.InlineKeyboardButton
	for _, st := range states {
		row := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(st.name, st.data),
		)
		rows = append(rows, row)
	}
	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

func enlightenmentHard() tgbotapi.InlineKeyboardMarkup {
	states := []button{
		{name: "–°–ø–∏–Ω–∞ (—Å–ª.)", data: "backHard"},
		{name: "–†—É–∫–∏ (—Å–ª.)", data: "handleHard"},
		{name: "–ù–æ–≥–∏ (—Å–ª.)", data: "kneesHard"},
		{name: "–¢—Ä–∏—Ü–µ–ø—Å (—Å–ª.)", data: "tricepsHard"},
		{name: "–ë–∏—Ü–µ–ø—Å (—Å–ª.)", data: "bicepsHard"},
		{name: "–ù–∞–∑–∞–¥", data: "hardBack"},
	}
	var rows [][]tgbotapi.InlineKeyboardButton
	for _, st := range states {
		row := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(st.name, st.data),
		)
		rows = append(rows, row)
	}
	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

func profileMenu() tgbotapi.InlineKeyboardMarkup {
	states := []button{
		{name: "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", data: "profile_anket"},
		{name: "–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", data: "Show_profile"},
		{name: "–ù–∞–∑–∞–¥", data: "back"},
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	for _, st := range states {
		row := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(st.name, st.data),
		)
		rows = append(rows, row)
	}
	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}


func handleCallback(update tgbotapi.Update) {
	data := update.CallbackQuery.Data
	chatID := update.CallbackQuery.Message.Chat.ID
	messageID := update.CallbackQuery.Message.MessageID

	del := tgbotapi.NewDeleteMessage(chatID, messageID)
	_, _ = bot.Send(del)

	switch data {
	case "calorie":
		prof, ok := userProfiles[chatID]
		if !ok || prof == nil || prof.Height == 0 || prof.Weight == 0 || prof.Age == 0 || prof.Gender == "" {
			sendText(chatID, "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –µ—â—ë –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ ¬´–ü—Ä–æ—Ñ–∏–ª—å¬ª –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
			return
		}

		genderForCalc := "–∂–µ–Ω—Å–∫–∏–π"
		if strings.ToLower(prof.Gender) == "male" {
			genderForCalc = "–º—É–∂—Å–∫–æ–π"
		}

		cals := calculateCalories(
			genderForCalc,
			float64(prof.Weight),
			float64(prof.Height),
			prof.Age,
		)
		msg := fmt.Sprintf("–í–∞—à –±–∞–∑–æ–≤—ã–π –æ–±–º–µ–Ω –≤–µ—â–µ—Å—Ç–≤: %.2f –∫–∫–∞–ª/–¥–µ–Ω—å\n(–ü–æ –¥–∞–Ω–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª—è)", cals)
		sendText(chatID, msg)

	case "traine":
		msg := tgbotapi.NewMessage(chatID,
			"üèãÔ∏è‚Äç‚ôÇÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏*\n"+
				"üü¢ *–õ—ë–≥–∫–∏–π —É—Ä–æ–≤–µ–Ω—å* ‚Äî –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.\n"+
				"üü° *–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å* ‚Äî –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –≥–æ—Ç–æ–≤ –∫ –≤—ã–∑–æ–≤—É.\n"+
				"üî¥ *–°–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å* ‚Äî –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö.\n\n"+
				"üîô *–ù–∞–∑–∞–¥* ‚Äî –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = traineMenu()
		sendMessage(msg)

	case "profile":
		msg := tgbotapi.NewMessage(chatID,
			"üßë‚Äçüíª *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è*\n"+
				"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:\n\n"+
				"‚úèÔ∏è *–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å* ‚Äî –≤–Ω–µ—Å–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–≤–æ—ë–º —Ä–æ—Å—Ç–µ, –≤–µ—Å–µ, –≤–æ–∑—Ä–∞—Å—Ç–µ –∏ –ø–æ–ª–µ.\n"+
				"üëÄ *–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å* ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n"+
				"üîô *–ù–∞–∑–∞–¥* ‚Äî –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = profileMenu()
		sendMessage(msg)

	case "Show_profile":
		prof, ok := userProfiles[chatID]
		if !ok || prof == nil {
			sendText(chatID, "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–∫–∞ –ø—É—Å—Ç. –ù–∞–∂–º–∏—Ç–µ ¬´–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å¬ª, —á—Ç–æ–±—ã –≤–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ.")
			return
		}
		msg := fmt.Sprintf("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n–†–æ—Å—Ç: %d —Å–º\n–í–µ—Å: %d –∫–≥\n–í–æ–∑—Ä–∞—Å—Ç: %d –ª–µ—Ç\n–ü–æ–ª: %s",
			prof.Height, prof.Weight, prof.Age, prof.Gender)
		sendText(chatID, msg)

	case "back":
		mainMsg := tgbotapi.NewMessage(chatID,
			"üëã *–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à —Ñ–∏—Ç–Ω–µ—Å-–ø–æ–º–æ—â–Ω–∏–∫.*\n"+
				"–í–æ—Ç, —á—Ç–æ —è —É–º–µ—é:\n\n"+
				"üçé *–ü–æ–¥—Å—á—ë—Ç –∫–∞–ª–æ—Ä–∏–π* ‚Äî –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É (–ø–æ –¥–∞–Ω–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª—è).\n"+
				"üèãÔ∏è‚Äç‚ôÇÔ∏è *–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏* ‚Äî –ø–æ–¥–±–µ—Ä—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.\n"+
				"üßë‚Äçüíª *–ü—Ä–æ—Ñ–∏–ª—å* ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.\n"+
				"üìî *–î–Ω–µ–≤–Ω–∏–∫* ‚Äî –∑–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.\n\n"+
				"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"+
				"- /start ‚Äî –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"+
				"- /train ‚Äî –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º\n"+
				"- /profile ‚Äî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å/–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"+
				"- /dnevnik ‚Äî –ó–∞–ø–∏—Å–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.")
		mainMsg.ParseMode = "Markdown"
		mainMsg.ReplyMarkup = startMenu()
		sendMessage(mainMsg)

	case "profile_anket":
		startProfileWizard(chatID)

	case "dnevnik":
		msg := tgbotapi.NewMessage(chatID, "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
		msg.ReplyMarkup = diaryMenu()
		sendMessage(msg)

	case "diary_add":
		userStep[chatID] = diaryStepAdd
		sendText(chatID, "–í–≤–µ–¥–∏—Ç–µ, —á—Ç–æ –≤—ã —Å–µ–≥–æ–¥–Ω—è —Å–¥–µ–ª–∞–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏–ª–∏).")

	case "diary_show":
		entries := userDiary[chatID]
		if len(entries) == 0 {
			sendText(chatID, "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ.")
			return
		}
		var sb strings.Builder
		sb.WriteString("–í–∞—à–∏ –∑–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ:\n\n")
		for i, entry := range entries {
			dateStr := entry.Date.Format("2006-01-02 15:04")
			sb.WriteString(fmt.Sprintf("%d) [%s] %s\n", i+1, dateStr, entry.Text))
		}
		sendText(chatID, sb.String())

		msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ:")
		msg.ReplyMarkup = diaryMenu()
		sendMessage(msg)

	case "Light":
		msg := tgbotapi.NewMessage(chatID, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª—ë–≥–∫–∏–π —É—Ä–æ–≤–µ–Ω—å.")
		msg.ReplyMarkup = enlightenment()
		sendMessage(msg)

	case "backLight":
		msg := tgbotapi.NewMessage(chatID, "–ü—Ä–∏–º–µ—Ä –ª—ë–≥–∫–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Å–ø–∏–Ω—ã:\n"+
			"1. ¬´–ö–æ—à–∫–∞-–∫–æ—Ä–æ–≤–∞¬ª (Cat-Camel)\n2. –ü–æ–∑–∞ —Ä–µ–±—ë–Ω–∫–∞ (Child‚Äôs Pose)\n3. Superman (–ª—ë–≥–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç)\n"+
			"–∏ —Ç.–¥. ...")
		msg.ReplyMarkup = enlightenment()
		sendMessage(msg)

	case "handleLight":
		sendText(chatID, "–†—É–∫–∏ (–ª—ë–≥.) ‚Äî –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ, –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.")

	case "kneesLight":
		sendText(chatID, "–ù–æ–≥–∏ (–ª—ë–≥.) ‚Äî –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ, –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.")

	case "tricepsLight":
		sendText(chatID, "–¢—Ä–∏—Ü–µ–ø—Å (–ª—ë–≥.) ‚Äî –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ.")

	case "bicepsLight":
		// –ü—Ä–∏–º–µ—Ä: –º–æ–∂–Ω–æ —á–∏—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ .env
		godotenv.Load()
		bigText := os.Getenv("BICEPSL")
		if bigText == "" {
			bigText = "–ü—É—Å—Ç–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è BICEPSL"
		}
		msg := tgbotapi.NewMessage(chatID, bigText)
		msg.ReplyMarkup = enlightenment()
		sendMessage(msg)

	case "lightBack":
		msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:")
		msg.ReplyMarkup = traineMenu()
		sendMessage(msg)

	case "Midle":
		msg := tgbotapi.NewMessage(chatID, "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å.")
		msg.ReplyMarkup = enlightenmentMidle()
		sendMessage(msg)

	case "backMidle":
		sendText(chatID, "–°–ø–∏–Ω–∞ (—Å—Ä.) ‚Äî –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ, –æ–ø–∏—Å–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —Ç—É—Ç.")

	case "handleMidle":
		sendText(chatID, "–†—É–∫–∏ (—Å—Ä.) ‚Äî –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ.")

	case "kneesMidle":
		sendText(chatID, "–ù–æ–≥–∏ (—Å—Ä.) ‚Äî –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ.")

	case "tricepsMidle":
		sendText(chatID, "–¢—Ä–∏—Ü–µ–ø—Å (—Å—Ä.) ‚Äî –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ.")

	case "bicepsMidle":
		sendText(chatID, "–ë–∏—Ü–µ–ø—Å (—Å—Ä.) ‚Äî –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ.")

	case "midleBack":
		msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:")
		msg.ReplyMarkup = traineMenu()
		sendMessage(msg)

	case "Hard":
		msg := tgbotapi.NewMessage(chatID, "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å.")
		msg.ReplyMarkup = enlightenmentHard()
		sendMessage(msg)

	case "backHard":
		sendText(chatID, "–°–ø–∏–Ω–∞ (—Å–ª.) ‚Äî –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ.")

	case "handleHard":
		sendText(chatID, "–†—É–∫–∏ (—Å–ª.) ‚Äî –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ.")

	case "kneesHard":
		sendText(chatID, "–ù–æ–≥–∏ (—Å–ª.) ‚Äî –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ.")

	case "tricepsHard":
		sendText(chatID, "–¢—Ä–∏—Ü–µ–ø—Å (—Å–ª.) ‚Äî –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ.")

	case "bicepsHard":
		sendText(chatID, "–ë–∏—Ü–µ–ø—Å (—Å–ª.) ‚Äî –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ.")

	case "hardBack":
		msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:")
		msg.ReplyMarkup = traineMenu()
		sendMessage(msg)
	}
}

func startProfileWizard(chatID int64) {
	// –°–æ–∑–¥–∞—ë–º (–∏–ª–∏ –æ—á–∏—â–∞–µ–º) –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if userProfiles[chatID] == nil {
		userProfiles[chatID] = &user_profile{}
	}

	userStep[chatID] = profileStepHeight
	sendText(chatID, "–î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
}

func handleCommands(update tgbotapi.Update) {
	chatID := update.Message.Chat.ID

	switch update.Message.Command() {
	case "start":
		msg := tgbotapi.NewMessage(chatID,
			"üëã *–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à —Ñ–∏—Ç–Ω–µ—Å-–ø–æ–º–æ—â–Ω–∏–∫.*\n"+
				"–í–æ—Ç, —á—Ç–æ —è —É–º–µ—é:\n"+
				"üçé *–ü–æ–¥—Å—á—ë—Ç –∫–∞–ª–æ—Ä–∏–π* ‚Äî –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É (–ø–æ –¥–∞–Ω–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª—è).\n"+
				"üèãÔ∏è‚Äç‚ôÇÔ∏è *–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏* ‚Äî –ø–æ–¥–±–µ—Ä—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.\n"+
				"üßë‚Äçüíª *–ü—Ä–æ—Ñ–∏–ª—å* ‚Äî —Å–æ—Ö—Ä–∞–Ω—è—é –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.\n"+
				"üìî *–î–Ω–µ–≤–Ω–∏–∫* ‚Äî –∑–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.\n\n"+
				"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ:\n"+
				"- /train ‚Äî –£—Ä–æ–≤–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"+
				"- /profile ‚Äî –ü—Ä–æ—Ñ–∏–ª—å\n"+
				"- /dnevnik ‚Äî –î–Ω–µ–≤–Ω–∏–∫",
		)
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = startMenu()
		sendMessage(msg)

	case "train":
		msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:")
		msg.ReplyMarkup = traineMenu()
		sendMessage(msg)

	case "profile":
		msg := tgbotapi.NewMessage(chatID,
			"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è:\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –Ω–∏–∂–µ:")
		msg.ReplyMarkup = profileMenu()
		sendMessage(msg)

	default:
		sendText(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: "+update.Message.Command())
	}
}

func handleMessage(update tgbotapi.Update) {
	chatID := update.Message.Chat.ID
	text := update.Message.Text

	switch userStep[chatID] {
	case profileStepHeight:
		height, err := strconv.Atoi(text)
		if err != nil || height <= 0 {
			sendText(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (—Ä–æ—Å—Ç –≤ —Å–º).")
			return
		}
		userProfiles[chatID].Height = height
		time.Sleep(1 * time.Second)
		sendText(chatID, "üìù–†–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")
		userStep[chatID] = profileStepWeight
		return

	case profileStepWeight:
		weight, err := strconv.Atoi(text)
		if err != nil || weight <= 0 {
			sendText(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (—á–∏—Å–ª–æ).")
			return
		}
		userProfiles[chatID].Weight = weight
		sendText(chatID, "üìù–í–µ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–ø–æ–ª–Ω—ã—Ö –ª–µ—Ç):")
		userStep[chatID] = profileStepAge
		return

	case profileStepAge:
		age, err := strconv.Atoi(text)
		if err != nil || age <= 0 {
			sendText(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ).")
			return
		}
		userProfiles[chatID].Age = age
		sendText(chatID, "üìù–í–æ–∑—Ä–∞—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª (male/female):")
		userStep[chatID] = profileStepGender
		return

	case profileStepGender:
		g := strings.ToLower(text)
		if g != "male" && g != "female" {
			sendText(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 'male' –∏–ª–∏ 'female'.")
			return
		}
		userProfiles[chatID].Gender = g
		sendText(chatID, "–û—Ç–ª–∏—á–Ω–æ, –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å /profile -> ¬´–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å¬ª –∏–ª–∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏.")
		userStep[chatID] = profileStepDone
		return
	}

	if userStep[chatID] == diaryStepAdd {
		entry := DiaryEntry{
			Date: time.Now(),
			Text: text,
		}
		userDiary[chatID] = append(userDiary[chatID], entry)
		userStep[chatID] = 0

		sendText(chatID, "–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à –¥–Ω–µ–≤–Ω–∏–∫!")
		msg := tgbotapi.NewMessage(chatID, "–í—ã —Å–Ω–æ–≤–∞ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
		msg.ReplyMarkup = diaryMenu()
		sendMessage(msg)
		return
	}

	// –ï—Å–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–ª–æ –Ω–∏ —Å –æ–¥–Ω–∏–º –∏–∑ ¬´—à–∞–≥–æ–≤¬ª ‚Äî –æ—Ç–≤–µ—á–∞–µ–º –∫–∞–∫ –Ω–∞ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
	sendText(chatID, "–Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "+text)
}

func sendText(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	_, err := bot.Send(msg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

func sendMessage(msg tgbotapi.Chattable) {
	_, err := bot.Send(msg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}
