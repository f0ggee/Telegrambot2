package main

import (
	"log"
	"os"
	"strconv"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"github.com/joho/godotenv"
)

// userState —Ö—Ä–∞–Ω–∏—Ç "—Å–æ—Å—Ç–æ—è–Ω–∏–µ" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á—Ç–æ–±—ã –ø–æ–Ω–∏–º–∞—Ç—å, —á—Ç–æ –º—ã —É –Ω–µ–≥–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º).
var userState = make(map[int64]string)

// userProfiles —Ö—Ä–∞–Ω–∏—Ç –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ chatID).
var userProfiles = make(map[int64]*user_profile)

type user_profile struct {
	Height int
	Weight int
	Traine int
}

// button ‚Äì –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Ç–∏–ø –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ (—Ç–µ–∫—Å—Ç –∏ –¥–∞–Ω–Ω—ã–µ)
type button struct {
	name string
	data string
}

var bot *tgbotapi.BotAPI

func main() {
	// 1. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
	err := godotenv.Load(".env")
	if err != nil {
		log.Println(".env not loaded (–µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –ø—Ä–æ–ø–∏—Å–∞–Ω –≤—Ä—É—á–Ω—É—é, —Ç–æ –≤—Å—ë –æ–∫)")
	}

	botToken := os.Getenv("TG_BOT_API")
	bot, err = tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Bot API: %v", err)
	}

	// 2. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates, err := bot.GetUpdatesChan(u)
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: %v", err)
	}

	log.Println("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

	// 3. –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª. –ü–æ–ª—É—á–∞–µ–º update –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
	for update := range updates {
		// 3.1. –ï—Å–ª–∏ –ø—Ä–∏—à—ë–ª –∫–æ–ª–±—ç–∫ (–Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É)
		if update.CallbackQuery != nil {
			handleCallback(update)
			continue
		}

		// 3.2. –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		if update.Message != nil {
			if update.Message.IsCommand() {
				handleCommands(update)
			} else {
				handleMessage(update)
			}
		}
	}
}

// ===========================================
// 1. –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–û–ö–ê–ó–ê –ú–ï–ù–Æ (–ò–ù–õ–ê–ô–ù-–ö–ù–û–ü–û–ö)
// ===========================================

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
func startMenu() tgbotapi.InlineKeyboardMarkup {
	states := []button{
		{name: "–ü–æ–¥—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π", data: "calorie"}, // –ü—Ä–∏–º–µ—Ä, –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω
		{name: "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", data: "traine"},
		{name: "–ü—Ä–æ—Ñ–∏–ª—å", data: "profile"},
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	for _, st := range states {
		row := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(st.name, st.data),
		)
		rows = append(rows, row)
	}

	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

// –ú–µ–Ω—é ¬´–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞¬ª
func traineMenu() tgbotapi.InlineKeyboardMarkup {
	states := []button{
		{name: "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: –ª—ë–≥–∫–∏–π —É—Ä–æ–≤–µ–Ω—å", data: "Light"},
		{name: "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å", data: "Midle"},
		{name: "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: —Å–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", data: "Hard"},
		{name: "–ù–∞–∑–∞–¥", data: "back"},
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	for _, st := range states {
		row := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(st.name, st.data),
		)
		rows = append(rows, row)
	}

	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

// –ü—Ä–∏–º–µ—Ä –ø–æ–¥-–º–µ–Ω—é –¥–ª—è –ª—ë–≥–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è (–º–æ–∂–Ω–æ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –∏–ª–∏ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å)
func enlightenment() tgbotapi.InlineKeyboardMarkup {
	states := []button{
		{name: "–ü—Ä–æ–∫–∞—á–∫–∞ –±–∏—Ü–µ–ø—Å–∞", data: "Bicepslight"},
		{name: "–ü—Ä–æ–∫–∞—á–∫–∞ –ø–µ—Ä–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ —Ä—É–∫–∏", data: "handle up"},
		{name: "–ü—Ä–æ–∫–∞—á–∫–∞ —Å—Ä–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ —Ä—É–∫–∏", data: "handle middle"},
		{name: "–ü—Ä–æ–∫–∞—á–∫–∞ –∑–∞–¥–Ω–µ–π —á–∞—Å—Ç–∏ —Ä—É–∫–∏", data: "handle behind"},
		{name: "–ü—Ä–æ–∫–∞—á–∫–∞ —Ç—Ä–∏—Ü–µ–ø—Å–∞", data: "upgrade triceps"},
		{name: "–ù–∞–∑–∞–¥", data: "back2"},
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	for _, st := range states {
		row := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(st.name, st.data),
		)
		rows = append(rows, row)
	}

	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

// –ü—Ä–∏–º–µ—Ä –ø–æ–¥-–º–µ–Ω—é –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è (–º–æ–∂–Ω–æ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –∏–ª–∏ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞—Ç—å)
func enlightenmentMidle() tgbotapi.InlineKeyboardMarkup {
	states := []button{
		{name: "–ü—Ä–æ–∫–∞—á–∫–∞ –±–∏—Ü–µ–ø—Å–∞ (—Å—Ä.)", data: "BicepslightM"},
		{name: "–ü—Ä–æ–∫–∞—á–∫–∞ –ø–µ—Ä–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ —Ä—É–∫–∏ (—Å—Ä.)", data: "handle upM"},
		{name: "–ü—Ä–æ–∫–∞—á–∫–∞ —Å—Ä–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ —Ä—É–∫–∏ (—Å—Ä.)", data: "handle middleM"},
		{name: "–ü—Ä–æ–∫–∞—á–∫–∞ –∑–∞–¥–Ω–µ–π —á–∞—Å—Ç–∏ —Ä—É–∫–∏ (—Å—Ä.)", data: "handle behindM"},
		{name: "–ü—Ä–æ–∫–∞—á–∫–∞ —Ç—Ä–∏—Ü–µ–ø—Å–∞ (—Å—Ä.)", data: "upgrade tricepsM"},
		{name: "–ù–∞–∑–∞–¥", data: "back3"},
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	for _, st := range states {
		row := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(st.name, st.data),
		)
		rows = append(rows, row)
	}

	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

// –ú–µ–Ω—é ¬´–ü—Ä–æ—Ñ–∏–ª—å¬ª
func profileMenu() tgbotapi.InlineKeyboardMarkup {
	states := []button{
		{name: "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç", data: "Ask_height"},
		{name: "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å", data: "Ask_weight"},
		{name: "–í–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –≤—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å", data: "Ask_traine"},
		{name: "–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", data: "Show_profile"},
		{name: "–ù–∞–∑–∞–¥", data: "back"},
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	for _, st := range states {
		row := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(st.name, st.data),
		)
		rows = append(rows, row)
	}

	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

// ===========================================
// 2. –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–õ–ë–≠–ö–û–í (–Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫)
// ===========================================
func handleCallback(update tgbotapi.Update) {
	data := update.CallbackQuery.Data
	chatID := update.CallbackQuery.Message.Chat.ID
	messageID := update.CallbackQuery.Message.MessageID

	// –£–¥–∞–ª–∏–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≥–¥–µ –±—ã–ª–∏ –∫–Ω–æ–ø–∫–∏)
	del := tgbotapi.NewDeleteMessage(chatID, messageID)
	_, _ = bot.Send(del)

	switch data {
	// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	case "calorie":
		sendText(chatID, "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–¥—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ).")
	case "traine":
		msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:")
		msg.ReplyMarkup = traineMenu()
		sendMessage(msg)
	case "profile":
		msg := tgbotapi.NewMessage(chatID, "–î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –ø—Ä–æ—Ñ–ª—å!üòÉ\n–ï—Å–ª–∏ –≤—ã –Ω–µ –µ—à–µ –Ω–µ –¥–µ–ª–∞–ª–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å,—Ç–æ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞,–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã :")
		msg.ReplyMarkup = profileMenu()
		sendMessage(msg)

	case "back":
		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
		msg := tgbotapi.NewMessage(chatID, "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫-–±–æ—Ç. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n- üìö –ü–æ–¥—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π.\n- üèãÔ∏è‚Äç‚ôÇÔ∏è –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n- üßë‚Äçüíª –ü—Ä–æ—Ñ–∏–ª—å —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤—Ä—É—á–Ω—É—é. –ù–∞–ø—Ä–∏–º–µ—Ä:\nstart - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\ntrain - –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\nprofile - –ü—Ä–æ—Ñ–∏–ª—å")
		msg.ReplyMarkup = startMenu()
		sendMessage(msg)

	// –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é ¬´–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞¬ª
	case "Light":
		msg := tgbotapi.NewMessage(chatID, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª—ë–≥–∫–∏–π —É—Ä–æ–≤–µ–Ω—å.")
		msg.ReplyMarkup = enlightenment()
		sendMessage(msg)
	case "Midle":
		msg := tgbotapi.NewMessage(chatID, "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å.")
		msg.ReplyMarkup = enlightenmentMidle()
		sendMessage(msg)
	case "Hard":
		sendText(chatID, "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å.")

	// –ö–Ω–æ–ø–∫–∏ –ø–æ–¥-–º–µ–Ω—é –ª—ë–≥–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è
	case "back2":
		// –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è
		msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:")
		msg.ReplyMarkup = traineMenu()
		sendMessage(msg)

	// –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É "Bicepslight", "handle up", ...
	// –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –ø—Ä–∏–º–µ—Ä
	case "Bicepslight":
		sendText(chatID, "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –±–∏—Ü–µ–ø—Å–∞ (–ª—ë–≥–∫–∏–π —É—Ä–æ–≤–µ–Ω—å).")

	// –ö–Ω–æ–ø–∫–∏ –ø–æ–¥-–º–µ–Ω—é —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
	case "back3":
		msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:")
		msg.ReplyMarkup = traineMenu()
		sendMessage(msg)

	// –∏ —Ç.–¥. –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫:
	case "handle upM":
		sendText(chatID, "–°—Ä. —É—Ä–æ–≤–µ–Ω—å, –ø—Ä–æ–∫–∞—á–∫–∞ –ø–µ—Ä–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ —Ä—É–∫–∏.")
	case "BicepslightM":
		sendText(chatID, "–°—Ä. —É—Ä–æ–≤–µ–Ω—å, –ø—Ä–æ–∫–∞—á–∫–∞ –±–∏—Ü–µ–ø—Å–∞.")
	// ...

	// –ü—Ä–æ—Ñ–∏–ª—å
	case "Ask_height":
		// –°—Ç–∞–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ –º—ã —Å–µ–π—á–∞—Å –ø—Ä–æ—Å–∏–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –†–æ—Å—Ç
		userState[chatID] = "asking_height"
		sendText(chatID, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 170):")

	case "Ask_weight":
		// –°—Ç–∞–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ –º—ã —Å–µ–π—á–∞—Å –ø—Ä–æ—Å–∏–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –í–µ—Å
		userState[chatID] = "asking_weight"
		sendText(chatID, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70):")

	case "Ask_traine":
		userState[chatID] = "asking_traine"
		sendText(chatID, "–í–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –≤—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å –≤ –∑–∞–ª–µ ?")

	case "Show_profile":
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
		prof, ok := userProfiles[chatID]
		if !ok {
			sendText(chatID, "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–∫–∞ –ø—É—Å—Ç. –í–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç/–≤–µ—Å.")
			return
		}

		message := "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
		message += "–†–æ—Å—Ç: " + strconv.Itoa(prof.Height) + "\n"
		message += "–í–µ—Å: " + strconv.Itoa(prof.Weight) + "\n"

		sendText(chatID, message)
	}
}

// ===========================================
// 3. –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î (–Ω–∞–ø—Ä–∏–º–µ—Ä: /start)
// ===========================================
func handleCommands(update tgbotapi.Update) {
	chatID := update.Message.Chat.ID

	switch update.Message.Command() {
	case "start":
		msg := tgbotapi.NewMessage(chatID, "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫-–±–æ—Ç. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n- üìö –ü–æ–¥—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π.\n- üèãÔ∏è‚Äç‚ôÇÔ∏è –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n- üßë‚Äçüíª –ü—Ä–æ—Ñ–∏–ª—å —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤—Ä—É—á–Ω—É—é. –ù–∞–ø—Ä–∏–º–µ—Ä:\n/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n/train - –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n/profile - –ü—Ä–æ—Ñ–∏–ª—å")
		msg.ReplyMarkup = startMenu()
		sendMessage(msg)

	case "train":
		msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:")
		msg.ReplyMarkup = traineMenu()
		sendMessage(msg)

	case "profile":
		msg := tgbotapi.NewMessage(chatID, "–î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –ø—Ä–æ—Ñ–ª—å!üòÉ\n–ï—Å–ª–∏ –≤—ã –Ω–µ –µ—à–µ –Ω–µ –¥–µ–ª–∞–ª–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å,—Ç–æ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞,–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã :")
		msg.ReplyMarkup = profileMenu()
		sendMessage(msg)

	default:
		sendText(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: "+update.Message.Command())
	}
}

// ===========================================
// 4. –û–ë–†–ê–ë–û–¢–ö–ê –û–ë–´–ß–ù–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø (–Ω–µ –∫–æ–º–∞–Ω–¥–∞)
// ===========================================
func handleMessage(update tgbotapi.Update) {
	chatID := update.Message.Chat.ID
	text := update.Message.Text

	// –°–º–æ—Ç—Ä–∏–º, —á—Ç–æ —É –Ω–∞—Å –≤ userState[chatID]
	switch userState[chatID] {

	case "asking_height":
		// –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ
		height, err := strconv.Atoi(text)
		if err != nil {
			sendText(chatID, "üìù–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–±–µ–∑ –±—É–∫–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
			return
		}

		// –ï—Å–ª–∏ –≤ –∫–∞—Ä—Ç–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è ‚Äì —Å–æ–∑–¥–∞–¥–∏–º
		if userProfiles[chatID] == nil {
			userProfiles[chatID] = &user_profile{}
		}
		userProfiles[chatID].Height = height

		stickerMsg := tgbotapi.NewStickerShare(chatID, "CAACAgIAAxkBAAENjCpnjpaR_-huumrAY_ZpSimeXedrOwACgxcAAvr8sUgjW90hqxMV0TYE")
		_, err = bot.Send(stickerMsg)
		if err != nil {
			log.Printf("eror", err)
		}
		time.Sleep(1 * time.Second)

		sendText(chatID, "–í–∞—à —Ä–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
		// –°–±—Ä–æ—Å–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		userState[chatID] = ""

	case "asking_weight":
		weight, err := strconv.Atoi(text)
		if err != nil {
			sendText(chatID, "üìù–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–±–µ–∑ –±—É–∫–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
			return
		}

		if userProfiles[chatID] == nil {
			userProfiles[chatID] = &user_profile{}
		}
		userProfiles[chatID].Weight = weight

		sendText(chatID, "üìù–í–∞—à –≤–µ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
		userState[chatID] = ""

	default:
		// –ï—Å–ª–∏ –º—ã –Ω–∏ –≤ –∫–∞–∫–æ–º ¬´—Ä–µ–∂–∏–º–µ –≤–æ–ø—Ä–æ—Å–æ–≤¬ª –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è, –º–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å
		sendText(chatID, "–Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "+text)
	}

}

// ===========================================
// 5. –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –û–¢–ü–†–ê–í–ö–ò
// ===========================================
func sendText(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	_, err := bot.Send(msg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

func sendMessage(msg tgbotapi.Chattable) {
	_, err := bot.Send(msg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}
