package main

import (
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"github.com/joho/godotenv"
)

// ===================== –°–¢–†–£–ö–¢–£–†–´ –ò –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï =====================

// –®–∞–≥–∏ –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞ (–ø—Ä–æ—Ñ–∏–ª—è)
const (
	profileStepHeight = 1 // –í–æ–ø—Ä–æ—Å –æ —Ä–æ—Å—Ç–µ
	profileStepWeight = 2 // –í–æ–ø—Ä–æ—Å –æ –≤–µ—Å–µ
	profileStepAge    = 3 // –í–æ–ø—Ä–æ—Å –æ –≤–æ–∑—Ä–∞—Å—Ç–µ
	profileStepGender = 4 // –í–æ–ø—Ä–æ—Å –æ –ø–æ–ª–µ
	profileStepDone   = 5 // –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω
)

// –®–∞–≥–∏ –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞ (–∫–∞–ª–æ—Ä–∏–π)
const (
	calorieStepWeight = 101
	calorieStepHeight = 102
	calorieStepAge    = 103
	calorieStepGender = 104
	calorieStepDone   = 105
)

// userStep —Ö—Ä–∞–Ω–∏—Ç —Ç–µ–∫—É—â–∏–π —à–∞–≥ (–ª–∏–±–æ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è, –ª–∏–±–æ –¥–ª—è –∫–∞–ª–æ—Ä–∏–π) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
var userStep = make(map[int64]int)

// user_profile —Ö—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∫–æ–¥–∞)
type user_profile struct {
	Height int
	Weight int
	Age    int
	Gender string
}

// userProfiles —Ö—Ä–∞–Ω–∏—Ç –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ chatID (–∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∫–æ–¥–∞)
var userProfiles = make(map[int64]*user_profile)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è ¬´–∫–Ω–æ–ø–æ–∫¬ª (–∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∫–æ–¥–∞)
type button struct {
	name string
	data string
}

var bot *tgbotapi.BotAPI

// ===================== –õ–û–ì–ò–ö–ê –†–ê–°–ß–Å–¢–ê –ö–ê–õ–û–†–ò–ô (–∏–∑ –≤—Ç–æ—Ä–æ–≥–æ –∫–æ–¥–∞) =====================

func calculateCalories(gender string, weight float64, height float64, age int) float64 {
	if gender == "–º—É–∂—Å–∫–æ–π" {
		return 88.36 + (13.4 * weight) + (4.8 * height) - (5.7 * float64(age))
	}
	return 447.6 + (9.2 * weight) + (3.1 * height) - (4.3 * float64(age))
}

// –î–ª—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞ –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–∞—Ä—Ç–µ (–∫–∞–∫ –≤–æ –≤—Ç–æ—Ä–æ–º –∫–æ–¥–µ)
var calorieData = make(map[int64]map[string]string)

// ===================== MAIN =====================
func main() {
	// 1. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env (–µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –º–æ–∂–Ω–æ –ø—Ä–æ–ø–∏—Å–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é)
	err := godotenv.Load(".env")
	if err != nil {
		log.Println(".env not loaded (–µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –ø—Ä–æ–ø–∏—Å–∞–Ω –≤—Ä—É—á–Ω—É—é, —Ç–æ –≤—Å—ë –æ–∫)")
	}

	botToken := os.Getenv("TG_BOT_API")
	// –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ ‚Äî –º–æ–∂–Ω–æ –∑–∞—Ö–∞—Ä–¥–∫–æ–¥–∏—Ç—å —Ç–æ–∫–µ–Ω –≤–º–µ—Å—Ç–æ env
	// botToken := "7182429562:...–≤–∞—à_—Ç–æ–∫–µ–Ω..."

	bot, err = tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Bot API: %v", err)
	}

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates, err := bot.GetUpdatesChan(u)
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: %v", err)
	}

	log.Println("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

	// 3. –¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π/–∫–æ–ª–±—ç–∫–æ–≤
	for update := range updates {
		if update.CallbackQuery != nil {
			// –û–±—Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É
			handleCallback(update)
		} else if update.Message != nil {
			// –û–±—Ä–∞–±–æ—Ç–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			if update.Message.IsCommand() {
				handleCommands(update)
			} else {
				handleMessage(update)
			}
		}
	}
}

// ===================== –ú–ï–ù–Æ (–∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∫–æ–¥–∞) =====================

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
func startMenu() tgbotapi.InlineKeyboardMarkup {
	states := []button{
		{name: "–ü–æ–¥—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π", data: "calorie"},
		{name: "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", data: "traine"},
		{name: "–ü—Ä–æ—Ñ–∏–ª—å", data: "profile"},
		{name: "–î–Ω–µ–≤–Ω–∏–∫", data: "dnevnik"},
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	for _, st := range states {
		row := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(st.name, st.data),
		)
		rows = append(rows, row)
	}
	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

// –ú–µ–Ω—é ¬´–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞¬ª
func traineMenu() tgbotapi.InlineKeyboardMarkup {
	states := []button{
		{name: "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: –ª—ë–≥–∫–∏–π —É—Ä–æ–≤–µ–Ω—å", data: "Light"},
		{name: "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å", data: "Midle"},
		{name: "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: —Å–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", data: "Hard"},
		{name: "–ù–∞–∑–∞–¥", data: "back"},
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	for _, st := range states {
		row := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(st.name, st.data),
		)
		rows = append(rows, row)
	}
	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

// –õ—ë–≥–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
func enlightenment() tgbotapi.InlineKeyboardMarkup {
	states := []button{
		{name: "–ü—Ä–æ–∫–∞—á–∫–∞ –±–∏—Ü–µ–ø—Å–∞", data: "Bicepslight"},
		{name: "–ü—Ä–æ–∫–∞—á–∫–∞ –ø–µ—Ä–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ —Ä—É–∫–∏", data: "handle up"},
		{name: "–ü—Ä–æ–∫–∞—á–∫–∞ —Å—Ä–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ —Ä—É–∫–∏", data: "handle middle"},
		{name: "–ü—Ä–æ–∫–∞—á–∫–∞ –∑–∞–¥–Ω–µ–π —á–∞—Å—Ç–∏ —Ä—É–∫–∏", data: "handle behind"},
		{name: "–ü—Ä–æ–∫–∞—á–∫–∞ —Ç—Ä–∏—Ü–µ–ø—Å–∞", data: "upgrade triceps"},
		{name: "–ù–∞–∑–∞–¥", data: "back2"},
	}
	var rows [][]tgbotapi.InlineKeyboardButton
	for _, st := range states {
		row := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(st.name, st.data),
		)
		rows = append(rows, row)
	}
	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

// –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å
func enlightenmentMidle() tgbotapi.InlineKeyboardMarkup {
	states := []button{
		{name: "–ü—Ä–æ–∫–∞—á–∫–∞ –±–∏—Ü–µ–ø—Å–∞ (—Å—Ä.)", data: "BicepslightM"},
		{name: "–ü—Ä–æ–∫–∞—á–∫–∞ –ø–µ—Ä–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ —Ä—É–∫–∏ (—Å—Ä.)", data: "handle upM"},
		{name: "–ü—Ä–æ–∫–∞—á–∫–∞ —Å—Ä–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ —Ä—É–∫–∏ (—Å—Ä.)", data: "handle middleM"},
		{name: "–ü—Ä–æ–∫–∞—á–∫–∞ –∑–∞–¥–Ω–µ–π —á–∞—Å—Ç–∏ —Ä—É–∫–∏ (—Å—Ä.)", data: "handle behindM"},
		{name: "–ü—Ä–æ–∫–∞—á–∫–∞ —Ç—Ä–∏—Ü–µ–ø—Å–∞ (—Å—Ä.)", data: "upgrade tricepsM"},
		{name: "–ù–∞–∑–∞–¥", data: "back3"},
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	for _, st := range states {
		row := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(st.name, st.data),
		)
		rows = append(rows, row)
	}
	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

// –ú–µ–Ω—é ¬´–ü—Ä–æ—Ñ–∏–ª—å¬ª
func profileMenu() tgbotapi.InlineKeyboardMarkup {
	states := []button{
		{name: "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", data: "profile_anket"}, // <-- –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—à–∞–≥–æ–≤—ã–π –æ–ø—Ä–æ—Å
		{name: "–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", data: "Show_profile"},
		{name: "–ù–∞–∑–∞–¥", data: "back"},
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	for _, st := range states {
		row := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(st.name, st.data),
		)
		rows = append(rows, row)
	}
	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

// ===================== –û–ë–†–ê–ë–û–¢–ö–ê INLINE-–ö–ù–û–ü–û–ö (–∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∫–æ–¥–∞, —Å –¥–æ—Ä–∞–±–æ—Ç–∫–æ–π) =====================

func handleCallback(update tgbotapi.Update) {
	data := update.CallbackQuery.Data
	chatID := update.CallbackQuery.Message.Chat.ID
	messageID := update.CallbackQuery.Message.MessageID

	// –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å –∫–Ω–æ–ø–∫–∞–º–∏)
	del := tgbotapi.NewDeleteMessage(chatID, messageID)
	_, _ = bot.Send(del)

	switch data {
	// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	case "calorie":
		// –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–¥—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)."
		sendText(chatID, " ")
		// –ê —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º ¬´–≤—Ç–æ—Ä–æ–π¬ª –æ–ø—Ä–æ—Å (–∏–∑ –≤—Ç–æ—Ä–æ–≥–æ –∫–æ–¥–∞):
		startCalorieWizard(chatID)

	case "traine":
		msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:")
		msg.ReplyMarkup = traineMenu()
		sendMessage(msg)

	case "profile":
		msg := tgbotapi.NewMessage(chatID, "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è:\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –Ω–∏–∂–µ:")
		msg.ReplyMarkup = profileMenu()
		sendMessage(msg)

	case "Show_profile":
		prof, ok := userProfiles[chatID]
		if !ok || prof == nil {
			sendText(chatID, "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–∫–∞ –ø—É—Å—Ç. –ù–∞–∂–º–∏—Ç–µ ¬´–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å¬ª, —á—Ç–æ–±—ã –≤–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ.")
			return
		}
		msg := "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
		msg += "–†–æ—Å—Ç: " + strconv.Itoa(prof.Height) + "\n"
		msg += "–í–µ—Å: " + strconv.Itoa(prof.Weight) + "\n"
		msg += "–í–æ–∑—Ä–∞—Å—Ç: " + strconv.Itoa(prof.Age) + "\n"
		msg += "–ü–æ–ª: " + prof.Gender + "\n"

		sendText(chatID, msg)

	case "back":
		// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
		mainMsg := tgbotapi.NewMessage(chatID, "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫-–±–æ—Ç. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n- üìö –ü–æ–¥—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π\n- üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n- üßë‚Äçüíª –ü—Ä–æ—Ñ–∏–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /start, /train, /profile.")
		mainMsg.ReplyMarkup = startMenu()
		sendMessage(mainMsg)

	case "profile_anket":
		startProfileWizard(chatID)

	// --- –ö–Ω–æ–ø–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ---
	case "Light":
		msg := tgbotapi.NewMessage(chatID, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª—ë–≥–∫–∏–π —É—Ä–æ–≤–µ–Ω—å.")
		msg.ReplyMarkup = enlightenment()
		sendMessage(msg)

	case "Midle":
		msg := tgbotapi.NewMessage(chatID, "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å.")
		msg.ReplyMarkup = enlightenmentMidle()
		sendMessage(msg)

	case "Hard":
		sendText(chatID, "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å.")

	case "back2":
		msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:")
		msg.ReplyMarkup = traineMenu()
		sendMessage(msg)

	case "Bicepslight":
		sendText(chatID, "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –±–∏—Ü–µ–ø—Å–∞ (–ª—ë–≥–∫–∏–π —É—Ä–æ–≤–µ–Ω—å).")

	case "back3":
		msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:")
		msg.ReplyMarkup = traineMenu()
		sendMessage(msg)

	case "handle upM":
		sendText(chatID, "–°—Ä. —É—Ä–æ–≤–µ–Ω—å, –ø—Ä–æ–∫–∞—á–∫–∞ –ø–µ—Ä–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ —Ä—É–∫–∏.")

	case "BicepslightM":
		sendText(chatID, "–°—Ä. —É—Ä–æ–≤–µ–Ω—å, –ø—Ä–æ–∫–∞—á–∫–∞ –±–∏—Ü–µ–ø—Å–∞.")
	}
}

// ===================== –ó–ê–ü–£–°–ö –û–ü–†–û–°–ê –î–õ–Ø –ü–†–û–§–ò–õ–Ø (–∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∫–æ–¥–∞) =====================

func startProfileWizard(chatID int64) {
	// –°–æ–∑–¥–∞—ë–º (–∏–ª–∏ –æ—á–∏—â–∞–µ–º) –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if userProfiles[chatID] == nil {
		userProfiles[chatID] = &user_profile{}
	}

	// –°—Ç–∞–≤–∏–º –Ω–∞ –ø–µ—Ä–≤—ã–π —à–∞–≥ ‚Äî –≤–≤–æ–¥ —Ä–æ—Å—Ç–∞
	userStep[chatID] = profileStepHeight

	sendText(chatID, "–î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
}

// ===================== –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î (/start, /profile, /train, ...) =====================

func handleCommands(update tgbotapi.Update) {
	chatID := update.Message.Chat.ID

	switch update.Message.Command() {
	case "start":
		msg := tgbotapi.NewMessage(chatID, "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫-–±–æ—Ç.\n–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n- üìö –ü–æ–¥—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π\n- üèãÔ∏è‚Äç‚ôÇÔ∏è –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n- üßë‚Äçüíª –ü—Ä–æ—Ñ–∏–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã: /train, /profile.")
		msg.ReplyMarkup = startMenu()
		sendMessage(msg)

	case "train":
		msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:")
		msg.ReplyMarkup = traineMenu()
		sendMessage(msg)

	case "profile":
		msg := tgbotapi.NewMessage(chatID, "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è:\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –Ω–∏–∂–µ:")
		msg.ReplyMarkup = profileMenu()
		sendMessage(msg)

	default:
		sendText(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: "+update.Message.Command())
	}
}

// ===================== –û–ë–†–ê–ë–û–¢–ö–ê –û–ë–´–ß–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô =====================

func handleMessage(update tgbotapi.Update) {
	chatID := update.Message.Chat.ID
	text := update.Message.Text

	// 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –ª–∏ –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞ (wizard) –¥–ª—è –ü–†–û–§–ò–õ–Ø
	switch userStep[chatID] {
	case profileStepHeight:
		height, err := strconv.Atoi(text)
		if err != nil || height <= 0 {
			sendText(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (—Ä–æ—Å—Ç –≤ —Å–º).")
			return
		}
		userProfiles[chatID].Height = height

		// –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏–º–µ—Ä –∑–∞–¥–µ—Ä–∂–∫–∏ –∏ —Ç.–¥.
		time.Sleep(1 * time.Second)

		sendText(chatID, "üìù–†–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")
		userStep[chatID] = profileStepWeight
		return

	case profileStepWeight:
		weight, err := strconv.Atoi(text)
		if err != nil || weight <= 0 {
			sendText(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (—á–∏—Å–ª–æ).")
			return
		}
		userProfiles[chatID].Weight = weight

		sendText(chatID, "üìù–í–µ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–ø–æ–ª–Ω—ã—Ö –ª–µ—Ç):")
		userStep[chatID] = profileStepAge
		return

	case profileStepAge:
		age, err := strconv.Atoi(text)
		if err != nil || age <= 0 {
			sendText(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ).")
			return
		}
		userProfiles[chatID].Age = age

		sendText(chatID, "üìù–í–æ–∑—Ä–∞—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª (male/female):")
		userStep[chatID] = profileStepGender
		return

	case profileStepGender:
		if text != "male" && text != "female" {
			sendText(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 'male' –∏–ª–∏ 'female'.")
			return
		}
		userProfiles[chatID].Gender = text

		sendText(chatID, "–û—Ç–ª–∏—á–Ω–æ, –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ /profile –≤–æ –≤–∫–ª–∞–¥–∫–∏  ¬´–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å¬ª.")
		userStep[chatID] = profileStepDone
		return
	}

	// 2) –ï—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –æ–ø—Ä–æ—Å–∞ –ø—Ä–æ—Ñ–∏–ª—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º ‚Äî –Ω–µ –≤ –æ–ø—Ä–æ—Å–µ –ª–∏ –∫–∞–ª–æ—Ä–∏–π
	if userStep[chatID] >= calorieStepWeight && userStep[chatID] <= calorieStepGender {
		handleCalorieWizard(chatID, text)
		return
	}

	// 3) –ò–Ω–∞—á–µ ‚Äî –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
	sendText(chatID, "–Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "+text)
}

// ===================== –õ–û–ì–ò–ö–ê ¬´–í–¢–û–†–û–ì–û¬ª –ë–û–¢–ê: –û–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∫–∞–ª–æ—Ä–∏–π =====================

// startCalorieWizard ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º
func startCalorieWizard(chatID int64) {
	// –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –æ–±–Ω—É–ª—è–µ–º –∫–∞—Ä—Ç—É —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	calorieData[chatID] = map[string]string{}

	// –°—Ç–∞–≤–∏–º —à–∞–≥ = calorieStepWeight
	userStep[chatID] = calorieStepWeight

	// –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ –∫–æ–¥–∞ (–Ω–µ –∏–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç!)
	sendText(chatID, "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–≤–æ—ë –¥–Ω–µ–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π. –í–≤–µ–¥–∏ —Å–≤–æ–π –≤–µ—Å –≤ –∫–≥:")
}

// handleCalorieWizard ‚Äî –ø–æ—à–∞–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ (–≤–∑—è—Ç–∞ –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ –∫–æ–¥–∞)
func handleCalorieWizard(chatID int64, userMsg string) {
	data := calorieData[chatID]

	switch userStep[chatID] {
	case calorieStepWeight:
		weight, err := strconv.ParseFloat(userMsg, 64)
		if err != nil {
			sendText(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–µ—Å –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70.5):")
			return
		}
		data["weight"] = strconv.FormatFloat(weight, 'f', 1, 64)

		sendText(chatID, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö:")
		userStep[chatID] = calorieStepHeight
		return

	case calorieStepHeight:
		height, err := strconv.ParseFloat(userMsg, 64)
		if err != nil {
			sendText(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ä–æ—Å—Ç –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 175):")
			return
		}
		data["height"] = strconv.FormatFloat(height, 'f', 1, 64)

		sendText(chatID, "–£–∫–∞–∂–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç –≤ –≥–æ–¥–∞—Ö:")
		userStep[chatID] = calorieStepAge
		return

	case calorieStepAge:
		age, err := strconv.Atoi(userMsg)
		if err != nil {
			sendText(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25):")
			return
		}
		data["age"] = strconv.Itoa(age)

		sendText(chatID, "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª (–º—É–∂—Å–∫–æ–π –∏–ª–∏ –∂–µ–Ω—Å–∫–∏–π):")
		userStep[chatID] = calorieStepGender
		return

	case calorieStepGender:
		gender := strings.ToLower(strings.TrimSpace(userMsg))
		if gender != "–º—É–∂—Å–∫–æ–π" && gender != "–∂–µ–Ω—Å–∫–∏–π" {
			sendText(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª: –º—É–∂—Å–∫–æ–π –∏–ª–∏ –∂–µ–Ω—Å–∫–∏–π.")
			return
		}
		data["gender"] = gender

		// –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏
		weightVal, _ := strconv.ParseFloat(data["weight"], 64)
		heightVal, _ := strconv.ParseFloat(data["height"], 64)
		ageVal, _ := strconv.Atoi(data["age"])
		genderVal := data["gender"]

		calories := calculateCalories(genderVal, weightVal, heightVal, ageVal)
		result := fmt.Sprintf("–¢–≤–æ–π –±–∞–∑–æ–≤—ã–π –æ–±–º–µ–Ω –≤–µ—â–µ—Å—Ç–≤ (–∫–∞–ª–æ—Ä–∏–∏ –≤ –¥–µ–Ω—å): %.2f –∫–∫–∞–ª.", calories)

		sendText(chatID, result)

		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
		delete(calorieData, chatID)
		userStep[chatID] = 0 // –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ –æ–ø—Ä–æ—Å–∞
	}
}

// ===================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====================

func sendText(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	_, err := bot.Send(msg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

func sendMessage(msg tgbotapi.Chattable) {
	_, err := bot.Send(msg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}
