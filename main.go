package main

import (
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"github.com/joho/godotenv"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
type user_profile struct {
	Height int
	Weight int
	Traine int
	Gender string
	Age    int
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
var (
	bot          *tgbotapi.BotAPI
	userState    = make(map[int64]string)            // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ (—á—Ç–æ –±–æ—Ç –∂–¥—ë—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
	userProfiles = make(map[int64]*user_profile)     // –ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	userDiary    = make(map[int64]map[string]string) // –î–Ω–µ–≤–Ω–∏–∫: –¥–ª—è –∫–∞–∂–¥–æ–≥–æ chatID —Ö—Ä–∞–Ω–∏–º –∑–∞–ø–∏—Å–∏ (–¥–∞—Ç–∞ -> –∑–∞–ø–∏—Å—å)
	calorieData  = make(map[int64]map[string]string) // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –∫–∞–ª–æ—Ä–∏–π
)

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ –∫–∞–ª–æ—Ä–∏–π (–ø—Ä–∏–º–µ—Ä)
func calculateCalories(gender string, weight float64, height float64, age int) float64 {
	if gender == "–º—É–∂—Å–∫–æ–π" {
		return 88.36 + (13.4 * weight) + (4.8 * height) - (5.7 * float64(age))
	}
	// –ï—Å–ª–∏ –Ω–µ ¬´–º—É–∂—Å–∫–æ–π¬ª, —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –¥–ª—è ¬´–∂–µ–Ω—Å–∫–∏–π¬ª
	return 447.6 + (9.2 * weight) + (3.1 * height) - (4.3 * float64(age))
}

// ===== –ú–µ–Ω—é (inline-–∫–Ω–æ–ø–∫–∏) =====

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
func startMenu() tgbotapi.InlineKeyboardMarkup {
	buttons := [][]tgbotapi.InlineKeyboardButton{
		{
			tgbotapi.NewInlineKeyboardButtonData("üìã–ü–æ–¥—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–πüìã", "calorie"),
			tgbotapi.NewInlineKeyboardButtonData("üí™–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞üí™", "traine"),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("üìñ–î–Ω–µ–≤–Ω–∏–∫üìñ", "diary"),
			tgbotapi.NewInlineKeyboardButtonData("üë§–ü—Ä–æ—Ñ–∏–ª—åüë§", "profile"),
		},
	}
	return tgbotapi.NewInlineKeyboardMarkup(buttons...)
}

// –ú–µ–Ω—é ¬´–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞¬ª
func traineMenu() tgbotapi.InlineKeyboardMarkup {
	buttons := [][]tgbotapi.InlineKeyboardButton{
		{
			tgbotapi.NewInlineKeyboardButtonData("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: –ª—ë–≥–∫–∏–π —É—Ä–æ–≤–µ–Ω—å", "Light"),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å", "Midle"),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: —Å–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", "Hard"),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", "back"),
		},
	}
	return tgbotapi.NewInlineKeyboardMarkup(buttons...)
}

// –ü–æ–¥-–º–µ–Ω—é –ª—ë–≥–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è
func enlightenment() tgbotapi.InlineKeyboardMarkup {
	buttons := [][]tgbotapi.InlineKeyboardButton{
		{
			tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ–∫–∞—á–∫–∞ –±–∏—Ü–µ–ø—Å–∞", "Bicepslight"),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ–∫–∞—á–∫–∞ –ø–µ—Ä–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ —Ä—É–∫–∏", "handle up"),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ–∫–∞—á–∫–∞ —Å—Ä–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ —Ä—É–∫–∏", "handle middle"),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ–∫–∞—á–∫–∞ –∑–∞–¥–Ω–µ–π —á–∞—Å—Ç–∏ —Ä—É–∫–∏", "handle behind"),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ–∫–∞—á–∫–∞ —Ç—Ä–∏—Ü–µ–ø—Å–∞", "upgrade triceps"),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", "back2"),
		},
	}
	return tgbotapi.NewInlineKeyboardMarkup(buttons...)
}

// –ü–æ–¥-–º–µ–Ω—é —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
func enlightenmentMidle() tgbotapi.InlineKeyboardMarkup {
	buttons := [][]tgbotapi.InlineKeyboardButton{
		{
			tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ–∫–∞—á–∫–∞ –±–∏—Ü–µ–ø—Å–∞ (—Å—Ä.)", "BicepslightM"),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ–∫–∞—á–∫–∞ –ø–µ—Ä–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ —Ä—É–∫–∏ (—Å—Ä.)", "handle upM"),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ–∫–∞—á–∫–∞ —Å—Ä–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ —Ä—É–∫–∏ (—Å—Ä.)", "handle middleM"),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ–∫–∞—á–∫–∞ –∑–∞–¥–Ω–µ–π —á–∞—Å—Ç–∏ —Ä—É–∫–∏ (—Å—Ä.)", "handle behindM"),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ–∫–∞—á–∫–∞ —Ç—Ä–∏—Ü–µ–ø—Å–∞ (—Å—Ä.)", "upgrade tricepsM"),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", "back3"),
		},
	}
	return tgbotapi.NewInlineKeyboardMarkup(buttons...)
}

// –ü–æ–¥-–º–µ–Ω—é —Å–ª–æ–∂–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
func enlightenmentHard() tgbotapi.InlineKeyboardMarkup {
	buttons := [][]tgbotapi.InlineKeyboardButton{
		{
			tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ–∫–∞—á–∫–∞ –±–∏—Ü–µ–ø—Å–∞ (—Å–ª.)", "BicepslightH"),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ–∫–∞—á–∫–∞ –ø–µ—Ä–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ —Ä—É–∫–∏ (—Å–ª.)", "handle upH"),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ–∫–∞—á–∫–∞ —Å—Ä–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ —Ä—É–∫–∏ (—Å–ª.)", "handle middleH"),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ–∫–∞—á–∫–∞ –∑–∞–¥–Ω–µ–π —á–∞—Å—Ç–∏ —Ä—É–∫–∏ (—Å–ª.)", "handle behindH"),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ–∫–∞—á–∫–∞ —Ç—Ä–∏—Ü–µ–ø—Å–∞ (—Å–ª.)", "upgrade tricepsH"),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", "back3"), // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ traineMenu()
		},
	}
	return tgbotapi.NewInlineKeyboardMarkup(buttons...)
}

// –ú–µ–Ω—é ¬´–ü—Ä–æ—Ñ–∏–ª—å¬ª
func profileMenu() tgbotapi.InlineKeyboardMarkup {
	buttons := [][]tgbotapi.InlineKeyboardButton{
		{
			tgbotapi.NewInlineKeyboardButtonData("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç", "Ask_height"),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("–í–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç", "Ask_age"),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª", "Ask_gender"),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å", "Ask_weight"),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("–°–∫–æ–ª—å–∫–æ –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å (–ø—Ä–∏–º–µ—Ä)", "Ask_traine"),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "Show_profile"),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", "back"),
		},
	}
	return tgbotapi.NewInlineKeyboardMarkup(buttons...)
}

// –ú–µ–Ω—é ¬´–î–Ω–µ–≤–Ω–∏–∫¬ª
func diaryMenu() tgbotapi.InlineKeyboardMarkup {
	buttons := [][]tgbotapi.InlineKeyboardButton{
		{
			tgbotapi.NewInlineKeyboardButtonData("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", "add_entry"),
			tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏", "view_entries"),
		},
		{
			tgbotapi.NewInlineKeyboardButtonData("–ù–∞–∑–∞–¥", "back"),
		},
	}
	return tgbotapi.NewInlineKeyboardMarkup(buttons...)
}

func main() {
	err := godotenv.Load(".env")
	if err != nil {
		log.Println(".env not loaded (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –ø—Ä–æ–ø–∏—Å–∞–Ω –≤—Ä—É—á–Ω—É—é)")
	}

	botToken := os.Getenv("TG_BOT_API")
	bot, err = tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TG Bot API: %v", err)
	}

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates, err := bot.GetUpdatesChan(u)
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å UpdatesChan: %v", err)
	}

	log.Println("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

	for update := range updates {
		if update.CallbackQuery != nil {
			handleCallback(update)
		} else if update.Message != nil {
			if update.Message.IsCommand() {
				handleCommands(update)
			} else {
				handleMessage(update)
			}
		}
	}
}

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /start) ---
func handleCommands(update tgbotapi.Update) {
	chatID := update.Message.Chat.ID

	switch update.Message.Command() {
	case "start":
		msg := tgbotapi.NewMessage(chatID,
			"–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫-–±–æ—Ç. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"+
				"- –ü–æ–¥—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π\n"+
				"- –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"+
				"- –î–Ω–µ–≤–Ω–∏–∫\n"+
				"- –ü—Ä–æ—Ñ–∏–ª—å.\n\n"+
				"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"+
				"/start, /train, /profile")
		msg.ReplyMarkup = startMenu()
		bot.Send(msg)

	case "train":
		trainMsg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:")
		trainMsg.ReplyMarkup = traineMenu()
		bot.Send(trainMsg)

	case "profile":
		profMsg := tgbotapi.NewMessage(chatID, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:")
		profMsg.ReplyMarkup = profileMenu()
		bot.Send(profMsg)

	default:
		sendText(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
	}
}

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏ (CallbackQuery) ---
func handleCallback(update tgbotapi.Update) {
	chatID := update.CallbackQuery.Message.Chat.ID
	data := update.CallbackQuery.Data

	// –£–¥–∞–ª–∏–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≥–¥–µ –∫–Ω–æ–ø–∫–∏)
	msgID := update.CallbackQuery.Message.MessageID
	delMsg := tgbotapi.NewDeleteMessage(chatID, msgID)
	_, _ = bot.Send(delMsg)

	switch data {
	// --- –î–Ω–µ–≤–Ω–∏–∫ ---
	case "diary":
		msg := tgbotapi.NewMessage(chatID, "–í—ã –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ:")
		msg.ReplyMarkup = diaryMenu()
		bot.Send(msg)

	case "add_entry":
		userState[chatID] = "adding_entry"
		sendText(chatID, "–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞, —Å—ä–µ–¥–µ–Ω–æ ...).")

	case "view_entries":
		entries, exists := userDiary[chatID]
		if !exists || len(entries) == 0 {
			sendText(chatID, "–í–∞—à –¥–Ω–µ–≤–Ω–∏–∫ –ø–æ–∫–∞ –ø—É—Å—Ç.")
			return
		}
		var response string
		response = "–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n"
		for date, entry := range entries {
			response += fmt.Sprintf("%s: %s\n", date, entry)
		}
		sendText(chatID, response)

	// --- –ü–æ–¥—Å—á—ë—Ç –∫–∞–ª–æ—Ä–∏–π ---
	case "calorie":
		calorieData[chatID] = make(map[string]string)
		userState[chatID] = "calorie_weight"
		sendText(chatID, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å (–∫–≥), –Ω–∞–ø—Ä–∏–º–µ—Ä 70.5:")

	// --- –¢–†–ï–ù–ò–†–û–í–ö–ò (–≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è) ---
	case "traine":
		msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:")
		msg.ReplyMarkup = traineMenu()
		bot.Send(msg)

	case "Light":
		lightMsg := tgbotapi.NewMessage(chatID, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª—ë–≥–∫–∏–π —É—Ä–æ–≤–µ–Ω—å.")
		lightMsg.ReplyMarkup = enlightenment()
		bot.Send(lightMsg)

	case "Midle":
		midMsg := tgbotapi.NewMessage(chatID, "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å.")
		midMsg.ReplyMarkup = enlightenmentMidle()
		bot.Send(midMsg)

	case "Hard":
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å–ª–æ–∂–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
		hardMsg := tgbotapi.NewMessage(chatID, "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å.")
		hardMsg.ReplyMarkup = enlightenmentHard()
		bot.Send(hardMsg)

	// --- –ù–∞–∑–∞–¥ –∏–∑ –ø–æ–¥-–º–µ–Ω—é –ª—ë–≥–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è ---
	case "back2":
		backMsg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:")
		backMsg.ReplyMarkup = traineMenu()
		bot.Send(backMsg)

	// --- –ù–∞–∑–∞–¥ –∏–∑ –ø–æ–¥-–º–µ–Ω—é —Å—Ä–µ–¥–Ω–µ–≥–æ/—Å–ª–æ–∂–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è ---
	case "back3":
		backMsg2 := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:")
		backMsg2.ReplyMarkup = traineMenu()
		bot.Send(backMsg2)

	// --- –õ—ë–≥–∫–∏–π —É—Ä–æ–≤–µ–Ω—å, 5 –º—ã—à–µ—á–Ω—ã—Ö –≥—Ä—É–ø–ø ---
	case "Bicepslight":
		textBicepsLight := `
–õ—ë–≥–∫–∏–π —É—Ä–æ–≤–µ–Ω—å (–ù–æ–≤–∏—á–æ–∫) –¥–ª—è –±–∏—Ü–µ–ø—Å–∞:
1. –°–≥–∏–±–∞–Ω–∏—è —Ä—É–∫ —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏ —Å—Ç–æ—è 
   - 2‚Äì3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 12‚Äì15 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
2. –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–≥–∏–±–∞–Ω–∏—è (–ø–æ–æ—á–µ—Ä—ë–¥–Ω–æ)
   - 2 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 10‚Äì12 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
3. –ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞—Ç–Ω—ã–º —Ö–≤–∞—Ç–æ–º (–µ—Å–ª–∏ –º–æ–∂–µ—Ç–µ)
   - 2 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ –º–∞–∫—Å. (5‚Äì8 –¥–ª—è –Ω–∞—á–∞–ª–∞)

–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ç–µ—Ö–Ω–∏–∫–æ–π –∏ –Ω–µ –±–µ—Ä–∏—Ç–µ –±–æ–ª—å—à–æ–π –≤–µ—Å!
`
		sendText(chatID, textBicepsLight)

	case "handle up":
		textFrontArmLight := `
–õ—ë–≥–∫–∏–π —É—Ä–æ–≤–µ–Ω—å: –ø–µ—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å —Ä—É–∫–∏ (–ø–µ—Ä–µ–¥–Ω–∏–µ –¥–µ–ª—å—Ç—ã):
1. –ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π —Å–∏–¥—è (–∏–ª–∏ —Å—Ç–æ—è)
   - 2‚Äì3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 12‚Äì15 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
2. –ü–µ—Ä–µ–¥–Ω–∏–µ –ø–æ–¥—ä—ë–º—ã –≥–∞–Ω—Ç–µ–ª–µ–π
   - 2 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 10‚Äì12 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
3. –û—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç –ø–æ–ª–∞ —Å —É–∑–∫–æ–π –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
   - 2 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 10‚Äì12

–ù–µ —Å–ø–µ—à–∏—Ç–µ, –≥–ª–∞–≤–Ω–æ–µ ‚Äî —Ç–µ—Ö–Ω–∏–∫–∞!
`
		sendText(chatID, textFrontArmLight)

	case "handle middle":
		textMiddleDeltsLight := `
–õ—ë–≥–∫–∏–π —É—Ä–æ–≤–µ–Ω—å: —Å—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å —Ä—É–∫–∏ (—Å—Ä–µ–¥–Ω–∏–µ –¥–µ–ª—å—Ç—ã):
1. –†–∞–∑–≤–µ–¥–µ–Ω–∏—è —Ä—É–∫ –≤ —Å—Ç–æ—Ä–æ–Ω—ã (–≥–∞–Ω—Ç–µ–ª–∏) —Å—Ç–æ—è
   - 2‚Äì3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 12‚Äì15 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
2. –£–ø—Ä–æ—â—ë–Ω–Ω—ã–µ "–ê—Ä—á–µ—Ä –æ—Ç–∂–∏–º–∞–Ω–∏—è"
   - 2 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 5‚Äì8 –Ω–∞ –∫–∞–∂–¥—É—é —Å—Ç–æ—Ä–æ–Ω—É
3. –ü–æ–¥—ä—ë–º –≥–∞–Ω—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ —Å—Ç–æ—Ä–æ–Ω—ã –≤ –Ω–∞–∫–ª–æ–Ω–µ
   - 2 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 10‚Äì12

–†–∞–∑–æ–≥—Ä–µ–≤–∞–π—Ç–µ –ø–ª–µ—á–∏ –ø–µ—Ä–µ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π.
`
		sendText(chatID, textMiddleDeltsLight)

	case "handle behind":
		textBehindDeltsLight := `
–õ—ë–≥–∫–∏–π —É—Ä–æ–≤–µ–Ω—å: –∑–∞–¥–Ω—è—è —á–∞—Å—Ç—å —Ä—É–∫–∏ (–∑–∞–¥–Ω—è—è –¥–µ–ª—å—Ç–∞):
1. –†–∞–∑–≤–µ–¥–µ–Ω–∏—è –≤ –Ω–∞–∫–ª–æ–Ω–µ —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏
   - 2‚Äì3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 12‚Äì15
2. –¢—è–≥–∞ –≥–∞–Ω—Ç–µ–ª–∏ –∫ –ø–æ—è—Å—É —É–∑–∫–∏–º —Ö–≤–∞—Ç–æ–º
   - 2 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 10‚Äì12
3. –û–±—Ä–∞—Ç–Ω—ã–µ –æ—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç —Å–∫–∞–º—å–∏ (—É–ø—Ä–æ—â—ë–Ω–Ω—ã–µ)
   - 2 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 10

–ò–∑–±–µ–≥–∞–π—Ç–µ —Ä—ã–≤–∫–æ–≤, –¥–µ—Ä–∂–∏—Ç–µ —Å–ø–∏–Ω—É —Ä–æ–≤–Ω–æ.
`
		sendText(chatID, textBehindDeltsLight)

	case "upgrade triceps":
		textTricepsLight := `
–õ—ë–≥–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —Ç—Ä–∏—Ü–µ–ø—Å–∞:
1. –û—Ç–∂–∏–º–∞–Ω–∏—è —É–∑–∫–∏–º —Ö–≤–∞—Ç–æ–º 
   - 2‚Äì3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 10‚Äì12
2. –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –∂–∏–º —Å –≥–∞–Ω—Ç–µ–ª—å—é (–æ–¥–Ω–æ–π —Ä—É–∫–æ–π)
   - 2 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 10‚Äì12
3. –û–±—Ä–∞—Ç–Ω—ã–µ –æ—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç —Å–∫–∞–º—å–∏ (–Ω–æ–≥–∏ –Ω–∞ –ø–æ–ª—É)
   - 2 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 10

–î–µ—Ä–∂–∏—Ç–µ –ª–æ–∫—Ç–∏ –±–ª–∏–∂–µ –∫ —Ç—É–ª–æ–≤–∏—â—É.
`
		sendText(chatID, textTricepsLight)

	// --- –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å, 5 –º—ã—à–µ—á–Ω—ã—Ö –≥—Ä—É–ø–ø ---
	case "BicepslightM":
		textBicepsMiddle := `
–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –±–∏—Ü–µ–ø—Å–∞:
1. –°–≥–∏–±–∞–Ω–∏—è —Ä—É–∫ —Å–æ —à—Ç–∞–Ω–≥–æ–π 
   - 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 8‚Äì10
2. –°–≥–∏–±–∞–Ω–∏—è "–ú–æ–ª–æ—Ç–æ–∫" (–≥–∞–Ω—Ç–µ–ª–∏)
   - 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 10‚Äì12
3. –ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞—Ç–Ω—ã–º —Ö–≤–∞—Ç–æ–º
   - 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 8‚Äì10

–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ä–∞–∑–º–∏–Ω–∫–æ–π.
`
		sendText(chatID, textBicepsMiddle)

	case "handle upM":
		textFrontArmMiddle := `
–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å: –ø–µ—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å —Ä—É–∫–∏ (–ø–µ—Ä–µ–¥–Ω–∏–µ –¥–µ–ª—å—Ç—ã):
1. –ê—Ä–º–µ–π—Å–∫–∏–π –∂–∏–º —à—Ç–∞–Ω–≥–∏ —Å—Ç–æ—è
   - 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 8‚Äì10
2. –ü–µ—Ä–µ–¥–Ω–∏–µ –ø–æ–¥—ä—ë–º—ã –≥–∞–Ω—Ç–µ–ª–µ–π (–Ω–∞–∫–ª–æ–Ω–Ω–∞—è)
   - 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 10‚Äì12
3. –û—Ç–∂–∏–º–∞–Ω–∏—è –≤ —Å—Ç–æ–π–∫–µ —É —Å—Ç–µ–Ω—ã (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
   - 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 8‚Äì10

–£–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ –≤–µ—Å –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ.
`
		sendText(chatID, textFrontArmMiddle)

	case "handle middleM":
		textMiddleDeltsMiddle := `
–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å: —Å—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å —Ä—É–∫–∏ (—Å—Ä–µ–¥–Ω–∏–µ –¥–µ–ª—å—Ç—ã):
1. –†–∞–∑–≤–µ–¥–µ–Ω–∏—è —Ä—É–∫ –≤ —Å—Ç–æ—Ä–æ–Ω—ã (—Å—Ä–µ–¥–Ω–∏–π –≤–µ—Å)
   - 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 10‚Äì12
2. –†–∞–∑–≤–µ–¥–µ–Ω–∏—è –≤ —Ç—Ä–µ–Ω–∞–∂—ë—Ä–µ "–±–∞–±–æ—á–∫–∞" (–¥–µ–ª—å—Ç—ã)
   - 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 10‚Äì12
3. –ñ–∏–º –ê—Ä–Ω–æ–ª—å–¥–∞ (–≥–∞–Ω—Ç–µ–ª–∏)
   - 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 8‚Äì10
`
		sendText(chatID, textMiddleDeltsMiddle)

	case "handle behindM":
		textBehindDeltsMiddle := `
–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å: –∑–∞–¥–Ω—è—è –¥–µ–ª—å—Ç–∞:
1. –†–∞–∑–≤–µ–¥–µ–Ω–∏—è –≤ –Ω–∞–∫–ª–æ–Ω–µ —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏ (—Å—Ä–µ–¥–Ω–∏–π –≤–µ—Å)
   - 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 10‚Äì12
2. –¢—è–≥–∞ —à—Ç–∞–Ω–≥–∏ –≤ –Ω–∞–∫–ª–æ–Ω–µ —É–∑–∫–∏–º —Ö–≤–∞—Ç–æ–º
   - 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 8‚Äì10
3. –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞—Ç–Ω—ã–º —Ö–≤–∞—Ç–æ–º
   - 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 8‚Äì12
`
		sendText(chatID, textBehindDeltsMiddle)

	case "upgrade tricepsM":
		textTricepsMiddle := `
–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —Ç—Ä–∏—Ü–µ–ø—Å–∞:
1. –ñ–∏–º —à—Ç–∞–Ω–≥–∏ —É–∑–∫–∏–º —Ö–≤–∞—Ç–æ–º
   - 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 8‚Äì10
2. –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –∂–∏–º EZ-—à—Ç–∞–Ω–≥–æ–π (–ª—ë–∂–∞)
   - 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 8‚Äì10
3. –û–±—Ä–∞—Ç–Ω—ã–µ –æ—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç —Å–∫–∞–º—å–∏ (–Ω–æ–≥–∏ –ø–æ–≤—ã—à–µ)
   - 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 12
`
		sendText(chatID, textTricepsMiddle)

	// --- –°–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å, 5 –º—ã—à–µ—á–Ω—ã—Ö –≥—Ä—É–ø–ø ---
	case "BicepslightH":
		textBicepsHard := `
–°–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –±–∏—Ü–µ–ø—Å–∞:
1. –°–≥–∏–±–∞–Ω–∏—è —Ä—É–∫ —Å–æ —à—Ç–∞–Ω–≥–æ–π –Ω–∞ –Ω–∞–∫–ª–æ–Ω–Ω–æ–π —Å–∫–∞–º—å–µ
   - 4 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 6‚Äì8
2. –ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞—Ç–Ω—ã–º —Ö–≤–∞—Ç–æ–º —Å –æ—Ç—è–≥–æ—â–µ–Ω–∏–µ–º
   - 4 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 8‚Äì10
3. "21" –Ω–∞ –±–∏—Ü–µ–ø—Å (7 –Ω–∏–∂–Ω–∏—Ö, 7 –≤–µ—Ä—Ö–Ω–∏—Ö, 7 –ø–æ–ª–Ω—ã—Ö)
   - 2 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 21
`
		sendText(chatID, textBicepsHard)

	case "handle upH":
		textFrontArmHard := `
–°–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: –ø–µ—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å —Ä—É–∫–∏ (–ø–µ—Ä–µ–¥–Ω–∏–µ –¥–µ–ª—å—Ç—ã):
1. –ñ–∏–º —à—Ç–∞–Ω–≥–∏ —Å—Ç–æ—è (heavy)
   - 4 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 6‚Äì8
2. –ü–µ—Ä–µ–¥–Ω–∏–µ –º–∞—Ö–∏ —Å–æ —à—Ç–∞–Ω–≥–æ–π
   - 4 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 8‚Äì10
3. –û—Ç–∂–∏–º–∞–Ω–∏—è –≤ —Å—Ç–æ–π–∫–µ –Ω–∞ —Ä—É–∫–∞—Ö (Handstand push-ups)
   - 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ –º–∞–∫—Å.
`
		sendText(chatID, textFrontArmHard)

	case "handle middleH":
		textMiddleHard := `
–°–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: —Å—Ä–µ–¥–Ω–∏–µ –¥–µ–ª—å—Ç—ã:
1. –†–∞–∑–≤–µ–¥–µ–Ω–∏—è —Ä—É–∫ —Å —Ç—è–∂—ë–ª—ã–º–∏ –≥–∞–Ω—Ç–µ–ª—è–º–∏
   - 4 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 6‚Äì8
2. –ü–æ–¥—ä—ë–º –≥–∞–Ω—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ —Å—Ç–æ—Ä–æ–Ω—ã –≤ –±–ª–æ–∫–µ
   - 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 10‚Äì12
3. –°—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–µ—Ä–∂–∞–Ω–∏–µ (–≤ —Å—Ç–æ—Ä–æ–Ω—ã) 20‚Äì30 —Å–µ–∫
   - 2‚Äì3 –ø–æ–¥—Ö–æ–¥–∞
`
		sendText(chatID, textMiddleHard)

	case "handle behindH":
		textBehindHard := `
–°–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: –∑–∞–¥–Ω—è—è –¥–µ–ª—å—Ç–∞:
1. –†–∞–∑–≤–µ–¥–µ–Ω–∏—è –≤ –Ω–∞–∫–ª–æ–Ω–µ —Å —Ç—è–∂—ë–ª—ã–º–∏ –≥–∞–Ω—Ç–µ–ª—è–º–∏
   - 4 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 6‚Äì8
2. –û–±—Ä–∞—Ç–Ω—ã–µ "–±–∞–±–æ—á–∫–∏" –≤ —Ç—Ä–µ–Ω–∞–∂—ë—Ä–µ
   - 4 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 8‚Äì10
3. –ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è —à–∏—Ä–æ–∫–∏–º —Ö–≤–∞—Ç–æ–º –∑–∞ –≥–æ–ª–æ–≤—É
   - 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 8‚Äì10 (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ —Å —Ç–µ—Ö–Ω–∏–∫–æ–π)
`
		sendText(chatID, textBehindHard)

	case "upgrade tricepsH":
		textTricepsHard := `
–°–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —Ç—Ä–∏—Ü–µ–ø—Å–∞:
1. –ñ–∏–º —à—Ç–∞–Ω–≥–∏ —É–∑–∫–∏–º —Ö–≤–∞—Ç–æ–º (heavy)
   - 4 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 6‚Äì8
2. –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –∂–∏–º —Å—Ç–æ—è (—Ç—è–∂—ë–ª–∞—è –≥–∞–Ω—Ç–µ–ª—å)
   - 4 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 8
3. –û—Ç–∂–∏–º–∞–Ω–∏—è –Ω–∞ –±—Ä—É—Å—å—è—Ö —Å –æ—Ç—è–≥–æ—â–µ–Ω–∏–µ–º
   - 4 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 8‚Äì10
`
		sendText(chatID, textTricepsHard)

	// --- –ü—Ä–æ—Ñ–∏–ª—å ---
	case "profile":
		msg := tgbotapi.NewMessage(chatID, "–†–∞–±–æ—Ç–∞ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º:")
		msg.ReplyMarkup = profileMenu()
		bot.Send(msg)

	case "Ask_height":
		userState[chatID] = "asking_height"
		sendText(chatID, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 170).")

	case "Ask_age":
		userState[chatID] = "asking_age"
		sendText(chatID, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25).")

	case "Ask_gender":
		userState[chatID] = "asking_gender"
		sendText(chatID, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª (–º—É–∂—Å–∫–æ–π/–∂–µ–Ω—Å–∫–∏–π).")

	case "Ask_weight":
		userState[chatID] = "asking_weight"
		sendText(chatID, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70).")

	case "Ask_traine":
		userState[chatID] = "asking_traine"
		sendText(chatID, "–°–∫–æ–ª—å–∫–æ –ª–µ—Ç –≤—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å –≤ –∑–∞–ª–µ? (–ø—Ä–∏–º–µ—Ä: 3 –≥–æ–¥–∞).")

	case "Show_profile":
		prof, ok := userProfiles[chatID]
		if !ok {
			sendText(chatID, "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–∫–∞ –ø—É—Å—Ç.")
			return
		}
		message := "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
		message += fmt.Sprintf("–†–æ—Å—Ç: %d \n", prof.Height)
		message += fmt.Sprintf("–í–µ—Å: %d \n", prof.Weight)
		message += fmt.Sprintf("–í–æ–∑—Ä–∞—Å—Ç: %d \n", prof.Age)
		message += fmt.Sprintf("–ü–æ–ª: %s \n", prof.Gender)
		message += fmt.Sprintf("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: %d\n", prof.Traine)
		sendText(chatID, message)

	// --- –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
	case "back":
		mainMsg := tgbotapi.NewMessage(chatID,
			"–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫-–±–æ—Ç. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n- üìö –ü–æ–¥—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π.\n- üèãÔ∏è‚Äç‚ôÇÔ∏è –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n- üßë‚Äçüíª –ü—Ä–æ—Ñ–∏–ª—å.\n- üìô –î–Ω–µ–≤–Ω–∏–∫.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
		mainMsg.ReplyMarkup = startMenu()
		bot.Send(mainMsg)
	}
}

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ –∫–æ–º–∞–Ω–¥, –Ω–µ –∫–æ–ª–±—ç–∫–æ–≤) ---
func handleMessage(update tgbotapi.Update) {
	chatID := update.Message.Chat.ID
	text := update.Message.Text

	switch userState[chatID] {
	// --- –î–Ω–µ–≤–Ω–∏–∫ ---
	case "adding_entry":
		if userDiary[chatID] == nil {
			userDiary[chatID] = make(map[string]string)
		}
		date := time.Now().Format("02-01-2006") // "–¥–¥-–º–º-–≥–≥–≥–≥"
		userDiary[chatID][date] = text

		sendText(chatID, "–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –¥–Ω–µ–≤–Ω–∏–∫!")
		userState[chatID] = ""

	// --- –ü–æ–¥—Å—á—ë—Ç –∫–∞–ª–æ—Ä–∏–π (—à–∞–≥–∏) ---
	case "calorie_weight":
		weight, err := strconv.ParseFloat(text, 64)
		if err != nil {
			sendText(chatID, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70.5).")
			return
		}
		calorieData[chatID]["weight"] = fmt.Sprintf("%.1f", weight)

		userState[chatID] = "calorie_height"
		sendText(chatID, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 175):")
		return

	case "calorie_height":
		height, err := strconv.ParseFloat(text, 64)
		if err != nil {
			sendText(chatID, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 175).")
			return
		}
		calorieData[chatID]["height"] = fmt.Sprintf("%.1f", height)

		userState[chatID] = "calorie_age"
		sendText(chatID, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25):")
		return

	case "calorie_age":
		age, err := strconv.Atoi(text)
		if err != nil {
			sendText(chatID, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25).")
			return
		}
		calorieData[chatID]["age"] = strconv.Itoa(age)

		userState[chatID] = "calorie_gender"
		sendText(chatID, "–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª (–º—É–∂—Å–∫–æ–π/–∂–µ–Ω—Å–∫–∏–π):")
		return

	case "calorie_gender":
		gender := strings.ToLower(strings.TrimSpace(text))
		if gender != "–º—É–∂—Å–∫–æ–π" && gender != "–∂–µ–Ω—Å–∫–∏–π" {
			sendText(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ '–º—É–∂—Å–∫–æ–π' –∏–ª–∏ '–∂–µ–Ω—Å–∫–∏–π'.")
			return
		}
		calorieData[chatID]["gender"] = gender

		// –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã
		w, _ := strconv.ParseFloat(calorieData[chatID]["weight"], 64)
		h, _ := strconv.ParseFloat(calorieData[chatID]["height"], 64)
		a, _ := strconv.Atoi(calorieData[chatID]["age"])

		res := calculateCalories(gender, w, h, a)
		sendText(chatID, fmt.Sprintf("–í–∞—à –±–∞–∑–æ–≤—ã–π –æ–±–º–µ–Ω –≤–µ—â–µ—Å—Ç–≤: %.2f –∫–∫–∞–ª –≤ –¥–µ–Ω—å.", res))

		// –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
		delete(calorieData, chatID)
		userState[chatID] = ""

	// --- –ü—Ä–æ—Ñ–∏–ª—å (–≤–≤–æ–¥ —Ä–æ—Å—Ç–∞, –≤–µ—Å–∞, –≤–æ–∑—Ä–∞—Å—Ç–∞, –ø–æ–ª–∞, —Å—Ç–∞–∂–∞) ---
	case "asking_height":
		h, err := strconv.Atoi(text)
		if err != nil {
			sendText(chatID, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 170).")
			return
		}
		if userProfiles[chatID] == nil {
			userProfiles[chatID] = &user_profile{}
		}
		userProfiles[chatID].Height = h

		sendText(chatID, "–í–∞—à —Ä–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
		userState[chatID] = ""

	case "asking_age":
		a, err := strconv.Atoi(text)
		if err != nil {
			sendText(chatID, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25).")
			return
		}
		if userProfiles[chatID] == nil {
			userProfiles[chatID] = &user_profile{}
		}
		userProfiles[chatID].Age = a

		sendText(chatID, "–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
		userState[chatID] = ""

	case "asking_gender":
		g := strings.ToLower(strings.TrimSpace(text))
		if g != "–º—É–∂—Å–∫–æ–π" && g != "–∂–µ–Ω—Å–∫–∏–π" {
			sendText(chatID, "–£–∫–∞–∂–∏—Ç–µ '–º—É–∂—Å–∫–æ–π' –∏–ª–∏ '–∂–µ–Ω—Å–∫–∏–π'.")
			return
		}
		if userProfiles[chatID] == nil {
			userProfiles[chatID] = &user_profile{}
		}
		userProfiles[chatID].Gender = g

		sendText(chatID, "–í–∞—à –ø–æ–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
		userState[chatID] = ""

	case "asking_weight":
		w, err := strconv.Atoi(text)
		if err != nil {
			sendText(chatID, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70).")
			return
		}
		if userProfiles[chatID] == nil {
			userProfiles[chatID] = &user_profile{}
		}
		userProfiles[chatID].Weight = w

		sendText(chatID, "–í–∞—à –≤–µ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
		userState[chatID] = ""

	case "asking_traine":
		tr, err := strconv.Atoi(text)
		if err != nil {
			sendText(chatID, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 3).")
			return
		}
		if tr <= 3 {
			sendText(chatID, "–í—ã –±–æ–ª—å—à–æ–π –º–æ–ª–æ–¥–µ—Ü, —á—Ç–æ –Ω–∞—á–∞–ª–∏ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è! –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ª—ë–≥–∫–∏–π —É—Ä–æ–≤–µ–Ω—å.")
		} else if tr <= 5 {
			sendText(chatID, "–û—Ç–ª–∏—á–Ω–æ, –≤—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è! –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å ‚Äî –¥–ª—è –≤–∞—Å.")
		} else {
			sendText(chatID, "–í—ã —É–∂–µ —Ö–æ—Ä–æ—à–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã, –º–æ–∂–Ω–æ –ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å!")
		}

		if userProfiles[chatID] == nil {
			userProfiles[chatID] = &user_profile{}
		}
		userProfiles[chatID].Traine = tr
		sendText(chatID, "–î–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
		userState[chatID] = ""

	default:
		// –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –≤–≤–æ–¥–∞, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º
		sendText(chatID, "–Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "+text)
	}
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞
func sendText(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	_, err := bot.Send(msg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}
